
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  000011f4  00001288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000ca  008000ca  000012f2  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000012f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000013b  00000000  00000000  00001312  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000998  00000000  00000000  0000144d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000272  00000000  00000000  00001de5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000081a  00000000  00000000  00002057  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00002874  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f6  00000000  00000000  00002964  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000450  00000000  00000000  00002b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00002faa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__vector_1>
       8:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ec       	ldi	r26, 0xCA	; 202
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3d       	cpi	r26, 0xD6	; 214
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 15 02 	call	0x42a	; 0x42a <main>
      8a:	0c 94 f8 08 	jmp	0x11f0	; 0x11f0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
      92:	84 b3       	in	r24, 0x14	; 20
      94:	8f 70       	andi	r24, 0x0F	; 15
      96:	84 bb       	out	0x14, r24	; 20

	//change LCD mode
	SET_RW();		//Read mode
      98:	c1 9a       	sbi	0x18, 1	; 24
	CLEAR_RS();		//Read status
      9a:	c0 98       	cbi	0x18, 0	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
      9c:	81 e0       	ldi	r24, 0x01	; 1
      9e:	8a 95       	dec	r24
      a0:	f1 f7       	brne	.-4      	; 0x9e <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
      a2:	21 e0       	ldi	r18, 0x01	; 1
      a4:	c2 9a       	sbi	0x18, 2	; 24
      a6:	82 2f       	mov	r24, r18
      a8:	8a 95       	dec	r24
      aa:	f1 f7       	brne	.-4      	; 0xa8 <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
      ac:	83 b3       	in	r24, 0x13	; 19
		status=status<<4;
      ae:	80 7f       	andi	r24, 0xF0	; 240
      b0:	92 2f       	mov	r25, r18
      b2:	9a 95       	dec	r25
      b4:	f1 f7       	brne	.-4      	; 0xb2 <LCDBusyLoop+0x20>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
      b6:	c2 98       	cbi	0x18, 2	; 24
      b8:	92 2f       	mov	r25, r18
      ba:	9a 95       	dec	r25
      bc:	f1 f7       	brne	.-4      	; 0xba <LCDBusyLoop+0x28>
		_delay_us(1);	//tEL

		SET_E();
      be:	c2 9a       	sbi	0x18, 2	; 24
      c0:	92 2f       	mov	r25, r18
      c2:	9a 95       	dec	r25
      c4:	f1 f7       	brne	.-4      	; 0xc2 <LCDBusyLoop+0x30>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
      c6:	93 b3       	in	r25, 0x13	; 19
      c8:	92 2f       	mov	r25, r18
      ca:	9a 95       	dec	r25
      cc:	f1 f7       	brne	.-4      	; 0xca <LCDBusyLoop+0x38>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
      ce:	c2 98       	cbi	0x18, 2	; 24
      d0:	92 2f       	mov	r25, r18
      d2:	9a 95       	dec	r25
      d4:	f1 f7       	brne	.-4      	; 0xd2 <LCDBusyLoop+0x40>
		_delay_us(1);	//tEL
	}while(busy);
      d6:	87 fd       	sbrc	r24, 7
      d8:	e5 cf       	rjmp	.-54     	; 0xa4 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
      da:	c1 98       	cbi	0x18, 1	; 24
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
      dc:	84 b3       	in	r24, 0x14	; 20
      de:	80 6f       	ori	r24, 0xF0	; 240
      e0:	84 bb       	out	0x14, r24	; 20

}
      e2:	08 95       	ret

000000e4 <LCDByte>:


};

void LCDByte(uint8_t c,uint8_t isdata)
{
      e4:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
      e6:	66 23       	and	r22, r22
      e8:	11 f4       	brne	.+4      	; 0xee <LCDByte+0xa>
	CLEAR_RS();
      ea:	c0 98       	cbi	0x18, 0	; 24
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <LCDByte+0xc>
else
	SET_RS();
      ee:	c0 9a       	sbi	0x18, 0	; 24
      f0:	21 e0       	ldi	r18, 0x01	; 1
      f2:	82 2f       	mov	r24, r18
      f4:	8a 95       	dec	r24
      f6:	f1 f7       	brne	.-4      	; 0xf4 <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
      f8:	c2 9a       	sbi	0x18, 2	; 24

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
      fa:	85 b3       	in	r24, 0x15	; 21
      fc:	93 2f       	mov	r25, r19
      fe:	90 7f       	andi	r25, 0xF0	; 240
     100:	8f 70       	andi	r24, 0x0F	; 15
     102:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
     104:	95 bb       	out	0x15, r25	; 21
     106:	82 2f       	mov	r24, r18
     108:	8a 95       	dec	r24
     10a:	f1 f7       	brne	.-4      	; 0x108 <LCDByte+0x24>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     10c:	c2 98       	cbi	0x18, 2	; 24
     10e:	82 2f       	mov	r24, r18
     110:	8a 95       	dec	r24
     112:	f1 f7       	brne	.-4      	; 0x110 <LCDByte+0x2c>

_delay_us(1);

//Send the lower nibble
SET_E();
     114:	c2 9a       	sbi	0x18, 2	; 24

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     116:	85 b3       	in	r24, 0x15	; 21
     118:	32 95       	swap	r19
     11a:	30 7f       	andi	r19, 0xF0	; 240
     11c:	8f 70       	andi	r24, 0x0F	; 15
     11e:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
     120:	85 bb       	out	0x15, r24	; 21
     122:	82 2f       	mov	r24, r18
     124:	8a 95       	dec	r24
     126:	f1 f7       	brne	.-4      	; 0x124 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
     128:	c2 98       	cbi	0x18, 2	; 24
     12a:	2a 95       	dec	r18
     12c:	f1 f7       	brne	.-4      	; 0x12a <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
     12e:	0e 94 49 00 	call	0x92	; 0x92 <LCDBusyLoop>
}
     132:	08 95       	ret

00000134 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	ec 01       	movw	r28, r24
     13a:	10 c0       	rjmp	.+32     	; 0x15c <LCDWriteString+0x28>

	*****************************************************************/
 while(*msg!='\0')
 {
 	//Custom Char Support
	if(*msg=='%')
     13c:	85 32       	cpi	r24, 0x25	; 37
     13e:	51 f4       	brne	.+20     	; 0x154 <LCDWriteString+0x20>
	{
		msg++;
     140:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
     142:	88 81       	ld	r24, Y
     144:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
     146:	88 30       	cpi	r24, 0x08	; 8
     148:	28 f0       	brcs	.+10     	; 0x154 <LCDWriteString+0x20>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
     14a:	85 e2       	ldi	r24, 0x25	; 37
     14c:	61 e0       	ldi	r22, 0x01	; 1
     14e:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>
			LCDData(*msg);
     152:	88 81       	ld	r24, Y
		}
	}
	else
	{
		LCDData(*msg);
     154:	61 e0       	ldi	r22, 0x01	; 1
     156:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>
	}
	msg++;
     15a:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     15c:	88 81       	ld	r24, Y
     15e:	88 23       	and	r24, r24
     160:	69 f7       	brne	.-38     	; 0x13c <LCDWriteString+0x8>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	08 95       	ret

00000168 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     168:	ef 92       	push	r14
     16a:	ff 92       	push	r15
     16c:	0f 93       	push	r16
     16e:	1f 93       	push	r17
     170:	df 93       	push	r29
     172:	cf 93       	push	r28
     174:	00 d0       	rcall	.+0      	; 0x176 <LCDWriteInt+0xe>
     176:	00 d0       	rcall	.+0      	; 0x178 <LCDWriteInt+0x10>
     178:	0f 92       	push	r0
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
     17e:	9c 01       	movw	r18, r24
     180:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     182:	fe 01       	movw	r30, r28
     184:	31 96       	adiw	r30, 0x01	; 1
     186:	85 e0       	ldi	r24, 0x05	; 5
     188:	df 01       	movw	r26, r30
     18a:	1d 92       	st	X+, r1
     18c:	8a 95       	dec	r24
     18e:	e9 f7       	brne	.-6      	; 0x18a <LCDWriteInt+0x22>
     190:	fe 01       	movw	r30, r28
     192:	35 96       	adiw	r30, 0x05	; 5
     194:	0d c0       	rjmp	.+26     	; 0x1b0 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
     196:	c9 01       	movw	r24, r18
     198:	6a e0       	ldi	r22, 0x0A	; 10
     19a:	70 e0       	ldi	r23, 0x00	; 0
     19c:	0e 94 d0 05 	call	0xba0	; 0xba0 <__divmodhi4>
     1a0:	80 83       	st	Z, r24
	val=val/10;
     1a2:	c9 01       	movw	r24, r18
     1a4:	6a e0       	ldi	r22, 0x0A	; 10
     1a6:	70 e0       	ldi	r23, 0x00	; 0
     1a8:	0e 94 d0 05 	call	0xba0	; 0xba0 <__divmodhi4>
     1ac:	9b 01       	movw	r18, r22
     1ae:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     1b0:	21 15       	cp	r18, r1
     1b2:	31 05       	cpc	r19, r1
     1b4:	81 f7       	brne	.-32     	; 0x196 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     1b6:	bf ef       	ldi	r27, 0xFF	; 255
     1b8:	0f 3f       	cpi	r16, 0xFF	; 255
     1ba:	1b 07       	cpc	r17, r27
     1bc:	79 f4       	brne	.+30     	; 0x1dc <LCDWriteInt+0x74>
     1be:	20 e0       	ldi	r18, 0x00	; 0
     1c0:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
     1c2:	ae 01       	movw	r20, r28
     1c4:	4f 5f       	subi	r20, 0xFF	; 255
     1c6:	5f 4f       	sbci	r21, 0xFF	; 255
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <LCDWriteInt+0x66>
     1ca:	2f 5f       	subi	r18, 0xFF	; 255
     1cc:	3f 4f       	sbci	r19, 0xFF	; 255
     1ce:	fa 01       	movw	r30, r20
     1d0:	e2 0f       	add	r30, r18
     1d2:	f3 1f       	adc	r31, r19
     1d4:	80 81       	ld	r24, Z
     1d6:	88 23       	and	r24, r24
     1d8:	c1 f3       	breq	.-16     	; 0x1ca <LCDWriteInt+0x62>
     1da:	04 c0       	rjmp	.+8      	; 0x1e4 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
     1dc:	25 e0       	ldi	r18, 0x05	; 5
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	20 1b       	sub	r18, r16
     1e2:	31 0b       	sbc	r19, r17
     1e4:	7e 01       	movw	r14, r28
     1e6:	08 94       	sec
     1e8:	e1 1c       	adc	r14, r1
     1ea:	f1 1c       	adc	r15, r1
     1ec:	e2 0e       	add	r14, r18
     1ee:	f3 1e       	adc	r15, r19
     1f0:	89 01       	movw	r16, r18
     1f2:	09 c0       	rjmp	.+18     	; 0x206 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     1f4:	f7 01       	movw	r30, r14
     1f6:	81 91       	ld	r24, Z+
     1f8:	7f 01       	movw	r14, r30
     1fa:	80 5d       	subi	r24, 0xD0	; 208
     1fc:	61 e0       	ldi	r22, 0x01	; 1
     1fe:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     202:	0f 5f       	subi	r16, 0xFF	; 255
     204:	1f 4f       	sbci	r17, 0xFF	; 255
     206:	05 30       	cpi	r16, 0x05	; 5
     208:	11 05       	cpc	r17, r1
     20a:	a4 f3       	brlt	.-24     	; 0x1f4 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
     20c:	0f 90       	pop	r0
     20e:	0f 90       	pop	r0
     210:	0f 90       	pop	r0
     212:	0f 90       	pop	r0
     214:	0f 90       	pop	r0
     216:	cf 91       	pop	r28
     218:	df 91       	pop	r29
     21a:	1f 91       	pop	r17
     21c:	0f 91       	pop	r16
     21e:	ff 90       	pop	r15
     220:	ef 90       	pop	r14
     222:	08 95       	ret

00000224 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
     224:	84 31       	cpi	r24, 0x14	; 20
     226:	78 f4       	brcc	.+30     	; 0x246 <LCDGotoXY+0x22>

	//16x2 LCD type
	
	switch(y)
     228:	62 30       	cpi	r22, 0x02	; 2
     22a:	31 f0       	breq	.+12     	; 0x238 <LCDGotoXY+0x14>
     22c:	63 30       	cpi	r22, 0x03	; 3
     22e:	31 f0       	breq	.+12     	; 0x23c <LCDGotoXY+0x18>
     230:	61 30       	cpi	r22, 0x01	; 1
     232:	29 f4       	brne	.+10     	; 0x23e <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
     234:	80 64       	ori	r24, 0x40	; 64
     236:	03 c0       	rjmp	.+6      	; 0x23e <LCDGotoXY+0x1a>
			break;
		case 2:
			x+=0x14;
     238:	8c 5e       	subi	r24, 0xEC	; 236
     23a:	01 c0       	rjmp	.+2      	; 0x23e <LCDGotoXY+0x1a>
			break;
		case 3:
			x+=0x54;
     23c:	8c 5a       	subi	r24, 0xAC	; 172
			break;
	}

	x|=0b10000000;
  	LCDCmd(x);
     23e:	80 68       	ori	r24, 0x80	; 128
     240:	60 e0       	ldi	r22, 0x00	; 0
     242:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>
     246:	08 95       	ret

00000248 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
     248:	1f 93       	push	r17
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     250:	88 e9       	ldi	r24, 0x98	; 152
     252:	9a e3       	ldi	r25, 0x3A	; 58
     254:	01 97       	sbiw	r24, 0x01	; 1
     256:	f1 f7       	brne	.-4      	; 0x254 <LCDInit+0xc>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     258:	84 b3       	in	r24, 0x14	; 20
     25a:	80 6f       	ori	r24, 0xF0	; 240
     25c:	84 bb       	out	0x14, r24	; 20
	LCD_E_DDR|=(1<<LCD_E_POS);
     25e:	ba 9a       	sbi	0x17, 2	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     260:	b8 9a       	sbi	0x17, 0	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     262:	b9 9a       	sbi	0x17, 1	; 23

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
     264:	85 b3       	in	r24, 0x15	; 21
     266:	8f 70       	andi	r24, 0x0F	; 15
     268:	85 bb       	out	0x15, r24	; 21
	CLEAR_E();
     26a:	c2 98       	cbi	0x18, 2	; 24
	CLEAR_RW();
     26c:	c1 98       	cbi	0x18, 1	; 24
	CLEAR_RS();
     26e:	c0 98       	cbi	0x18, 0	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	98 2f       	mov	r25, r24
     274:	9a 95       	dec	r25
     276:	f1 f7       	brne	.-4      	; 0x274 <LCDInit+0x2c>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
     278:	c2 9a       	sbi	0x18, 2	; 24
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     27a:	ad 9a       	sbi	0x15, 5	; 21
     27c:	98 2f       	mov	r25, r24
     27e:	9a 95       	dec	r25
     280:	f1 f7       	brne	.-4      	; 0x27e <LCDInit+0x36>
	_delay_us(1);
	CLEAR_E();
     282:	c2 98       	cbi	0x18, 2	; 24
     284:	8a 95       	dec	r24
     286:	f1 f7       	brne	.-4      	; 0x284 <LCDInit+0x3c>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     288:	0e 94 49 00 	call	0x92	; 0x92 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     28c:	81 2f       	mov	r24, r17
     28e:	8c 60       	ori	r24, 0x0C	; 12
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     296:	88 e2       	ldi	r24, 0x28	; 40
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
     29e:	80 e4       	ldi	r24, 0x40	; 64
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>
     2a6:	cc e8       	ldi	r28, 0x8C	; 140
     2a8:	d0 e0       	ldi	r29, 0x00	; 0

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
     2aa:	89 91       	ld	r24, Y+
     2ac:	61 e0       	ldi	r22, 0x01	; 1
     2ae:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	c4 3c       	cpi	r28, 0xC4	; 196
     2b6:	d8 07       	cpc	r29, r24
     2b8:	c1 f7       	brne	.-16     	; 0x2aa <LCDInit+0x62>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	60 e0       	ldi	r22, 0x00	; 0
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>

}
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	1f 91       	pop	r17
     2cc:	08 95       	ret

000002ce <ADC_Init>:
unsigned long time=0;
unsigned int targetTemp = 15;

////FOR TEMP SENSOR////
void ADC_Init(){										
	ADMUX= 1<<REFS0 | 1<<1; //PA2 ready as ADC and making 5v
     2ce:	82 e4       	ldi	r24, 0x42	; 66
     2d0:	87 b9       	out	0x07, r24	; 7
	ADCSRA= 1<<ADEN |(0x07);// auto trigger on
     2d2:	87 e8       	ldi	r24, 0x87	; 135
     2d4:	86 b9       	out	0x06, r24	; 6
}
     2d6:	08 95       	ret

000002d8 <ADC_Read>:
////FOR TEMP SENSOR////
int ADC_Read(char channel){
	ADCSRA = ADCSRA | 1<<ADSC;//start the conversion
     2d8:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC));//wait until conversion is finished
     2da:	36 99       	sbic	0x06, 6	; 6
     2dc:	fe cf       	rjmp	.-4      	; 0x2da <ADC_Read+0x2>
	return ADCL | (ADCH<<8);//return the converted value              
     2de:	24 b1       	in	r18, 0x04	; 4
     2e0:	45 b1       	in	r20, 0x05	; 5
     2e2:	94 2f       	mov	r25, r20
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	28 2b       	or	r18, r24
     2ea:	39 2b       	or	r19, r25
} 
     2ec:	c9 01       	movw	r24, r18
     2ee:	08 95       	ret

000002f0 <__vector_1>:
   	// dispSSD(50);
	}   
}

////FOR TIMER////
ISR(INT0_vect){
     2f0:	1f 92       	push	r1
     2f2:	0f 92       	push	r0
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	0f 92       	push	r0
     2f8:	11 24       	eor	r1, r1
     2fa:	8f 93       	push	r24
     2fc:	9f 93       	push	r25

	if(r==1){
     2fe:	80 91 c4 00 	lds	r24, 0x00C4
     302:	90 91 c5 00 	lds	r25, 0x00C5
     306:	81 30       	cpi	r24, 0x01	; 1
     308:	91 05       	cpc	r25, r1
     30a:	19 f4       	brne	.+6      	; 0x312 <__vector_1+0x22>
		r=2;
     30c:	82 e0       	ldi	r24, 0x02	; 2
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	04 c0       	rjmp	.+8      	; 0x31a <__vector_1+0x2a>
	}
	else if(r==2){
     312:	02 97       	sbiw	r24, 0x02	; 2
     314:	31 f4       	brne	.+12     	; 0x322 <__vector_1+0x32>
		r=1;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	90 93 c5 00 	sts	0x00C5, r25
     31e:	80 93 c4 00 	sts	0x00C4, r24
	}
	
}
     322:	9f 91       	pop	r25
     324:	8f 91       	pop	r24
     326:	0f 90       	pop	r0
     328:	0f be       	out	0x3f, r0	; 63
     32a:	0f 90       	pop	r0
     32c:	1f 90       	pop	r1
     32e:	18 95       	reti

00000330 <initExtrnalInt>:
////FOR TIMER////
void initExtrnalInt(){
	MCUCR=(1<<ISC11)|(1<<ISC10)|(1<<ISC01)|(1<<ISC00);
     330:	8f e0       	ldi	r24, 0x0F	; 15
     332:	85 bf       	out	0x35, r24	; 53
	GICR=(1<<INT1)|(1<<INT0);
     334:	80 ec       	ldi	r24, 0xC0	; 192
     336:	8b bf       	out	0x3b, r24	; 59
	sei();
     338:	78 94       	sei
}
     33a:	08 95       	ret

0000033c <__vector_2>:
////FOR TIMER////
ISR(INT1_vect){
     33c:	1f 92       	push	r1
     33e:	0f 92       	push	r0
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	0f 92       	push	r0
     344:	11 24       	eor	r1, r1

	val2=0;
     346:	10 92 cf 00 	sts	0x00CF, r1
     34a:	10 92 ce 00 	sts	0x00CE, r1
	disp=0;
     34e:	10 92 d1 00 	sts	0x00D1, r1
     352:	10 92 d0 00 	sts	0x00D0, r1
	
}
     356:	0f 90       	pop	r0
     358:	0f be       	out	0x3f, r0	; 63
     35a:	0f 90       	pop	r0
     35c:	1f 90       	pop	r1
     35e:	18 95       	reti

00000360 <initTimer0CTC>:
////FOR TIMER////
void initTimer0CTC(void){
	TCCR0=(1<<CS01)|(1<<WGM01);//enable CTC mode and prescaling to 8
     360:	8a e0       	ldi	r24, 0x0A	; 10
     362:	83 bf       	out	0x33, r24	; 51
	TCNT0=0; // start the timer
     364:	12 be       	out	0x32, r1	; 50
	OCR0=250;//stop at 250. the comparing value. The maximum value TCCR0 can take
     366:	8a ef       	ldi	r24, 0xFA	; 250
     368:	8c bf       	out	0x3c, r24	; 60
	if(r==2)TIMSK |= (1 << OCIE0);//enable the interrupt to be called. so this should be handled
     36a:	80 91 c4 00 	lds	r24, 0x00C4
     36e:	90 91 c5 00 	lds	r25, 0x00C5
     372:	82 30       	cpi	r24, 0x02	; 2
     374:	91 05       	cpc	r25, r1
     376:	21 f4       	brne	.+8      	; 0x380 <initTimer0CTC+0x20>
     378:	89 b7       	in	r24, 0x39	; 57
     37a:	82 60       	ori	r24, 0x02	; 2
     37c:	89 bf       	out	0x39, r24	; 57
     37e:	03 c0       	rjmp	.+6      	; 0x386 <initTimer0CTC+0x26>
	else if(r==1)TIMSK =0;
     380:	01 97       	sbiw	r24, 0x01	; 1
     382:	09 f4       	brne	.+2      	; 0x386 <initTimer0CTC+0x26>
     384:	19 be       	out	0x39, r1	; 57
	sei();
     386:	78 94       	sei
}
     388:	08 95       	ret

0000038a <__vector_10>:
////FOR TIMER////
ISR (TIMER0_COMP_vect){//ISR- interrupt service routine
     38a:	1f 92       	push	r1
     38c:	0f 92       	push	r0
     38e:	0f b6       	in	r0, 0x3f	; 63
     390:	0f 92       	push	r0
     392:	11 24       	eor	r1, r1
     394:	2f 93       	push	r18
     396:	3f 93       	push	r19
     398:	5f 93       	push	r21
     39a:	6f 93       	push	r22
     39c:	7f 93       	push	r23
     39e:	8f 93       	push	r24
     3a0:	9f 93       	push	r25
     3a2:	af 93       	push	r26
     3a4:	bf 93       	push	r27
	val++;
     3a6:	80 91 ca 00 	lds	r24, 0x00CA
     3aa:	90 91 cb 00 	lds	r25, 0x00CB
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	90 93 cb 00 	sts	0x00CB, r25
     3b4:	80 93 ca 00 	sts	0x00CA, r24
	
	if(val==100){
     3b8:	84 36       	cpi	r24, 0x64	; 100
     3ba:	91 05       	cpc	r25, r1
     3bc:	69 f4       	brne	.+26     	; 0x3d8 <__vector_10+0x4e>
	disp++;
     3be:	80 91 d0 00 	lds	r24, 0x00D0
     3c2:	90 91 d1 00 	lds	r25, 0x00D1
     3c6:	01 96       	adiw	r24, 0x01	; 1
     3c8:	90 93 d1 00 	sts	0x00D1, r25
     3cc:	80 93 d0 00 	sts	0x00D0, r24
	val=0;
     3d0:	10 92 cb 00 	sts	0x00CB, r1
     3d4:	10 92 ca 00 	sts	0x00CA, r1
	}
	if(disp%600==0&&disp!=0){
     3d8:	20 91 d0 00 	lds	r18, 0x00D0
     3dc:	30 91 d1 00 	lds	r19, 0x00D1
     3e0:	c9 01       	movw	r24, r18
     3e2:	68 e5       	ldi	r22, 0x58	; 88
     3e4:	72 e0       	ldi	r23, 0x02	; 2
     3e6:	0e 94 bc 05 	call	0xb78	; 0xb78 <__udivmodhi4>
     3ea:	89 2b       	or	r24, r25
     3ec:	81 f4       	brne	.+32     	; 0x40e <__vector_10+0x84>
     3ee:	23 2b       	or	r18, r19
     3f0:	71 f0       	breq	.+28     	; 0x40e <__vector_10+0x84>
	val2+=1000;
     3f2:	80 91 ce 00 	lds	r24, 0x00CE
     3f6:	90 91 cf 00 	lds	r25, 0x00CF
     3fa:	88 51       	subi	r24, 0x18	; 24
     3fc:	9c 4f       	sbci	r25, 0xFC	; 252
     3fe:	90 93 cf 00 	sts	0x00CF, r25
     402:	80 93 ce 00 	sts	0x00CE, r24
	disp=0;
     406:	10 92 d1 00 	sts	0x00D1, r1
     40a:	10 92 d0 00 	sts	0x00D0, r1
	}
}
     40e:	bf 91       	pop	r27
     410:	af 91       	pop	r26
     412:	9f 91       	pop	r25
     414:	8f 91       	pop	r24
     416:	7f 91       	pop	r23
     418:	6f 91       	pop	r22
     41a:	5f 91       	pop	r21
     41c:	3f 91       	pop	r19
     41e:	2f 91       	pop	r18
     420:	0f 90       	pop	r0
     422:	0f be       	out	0x3f, r0	; 63
     424:	0f 90       	pop	r0
     426:	1f 90       	pop	r1
     428:	18 95       	reti

0000042a <main>:
int ADC_Read(char channel){
	ADCSRA = ADCSRA | 1<<ADSC;//start the conversion
	while(ADCSRA & (1<<ADSC));//wait until conversion is finished
	return ADCL | (ADCH<<8);//return the converted value              
} 
int main(void){
     42a:	2f 92       	push	r2
     42c:	3f 92       	push	r3
     42e:	4f 92       	push	r4
     430:	5f 92       	push	r5
     432:	6f 92       	push	r6
     434:	7f 92       	push	r7
     436:	8f 92       	push	r8
     438:	9f 92       	push	r9
     43a:	af 92       	push	r10
     43c:	bf 92       	push	r11
     43e:	cf 92       	push	r12
     440:	df 92       	push	r13
     442:	ef 92       	push	r14
     444:	ff 92       	push	r15
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	df 93       	push	r29
     44c:	cf 93       	push	r28
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
     452:	2a 97       	sbiw	r28, 0x0a	; 10
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
	
	char Temperature[10];
	float celsius;
	LCDInit(1);
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	0e 94 24 01 	call	0x248	; 0x248 <LCDInit>
unsigned long time=0;
unsigned int targetTemp = 15;

////FOR TEMP SENSOR////
void ADC_Init(){										
	ADMUX= 1<<REFS0 | 1<<1; //PA2 ready as ADC and making 5v
     464:	82 e4       	ldi	r24, 0x42	; 66
     466:	87 b9       	out	0x07, r24	; 7
	ADCSRA= 1<<ADEN |(0x07);// auto trigger on
     468:	87 e8       	ldi	r24, 0x87	; 135
     46a:	86 b9       	out	0x06, r24	; 6
	
	char Temperature[10];
	float celsius;
	LCDInit(1);
	ADC_Init(); 
	DDRD = DDRD & ~(1<<6) ; // Make pin 6 of port D as a input
     46c:	8e 98       	cbi	0x11, 6	; 17
	DDRD = DDRD & ~(1<<7) ;
     46e:	8f 98       	cbi	0x11, 7	; 17
	DDRD = DDRD & ~(1<<5) ;
     470:	8d 98       	cbi	0x11, 5	; 17
	DDRD = DDRD & ~(1<<4) ;
     472:	8c 98       	cbi	0x11, 4	; 17
	DDRD = DDRD | 0b00000001;
     474:	88 9a       	sbi	0x11, 0	; 17
	PORTD = 0x01;
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	82 bb       	out	0x12, r24	; 18
	
	DDRA = DDRA & ~(1<<4) ;
     47a:	d4 98       	cbi	0x1a, 4	; 26
	DDRA = DDRA & ~(1<<3) ;
     47c:	d3 98       	cbi	0x1a, 3	; 26
	}
	
}
////FOR TIMER////
void initExtrnalInt(){
	MCUCR=(1<<ISC11)|(1<<ISC10)|(1<<ISC01)|(1<<ISC00);
     47e:	5f e0       	ldi	r21, 0x0F	; 15
     480:	35 2e       	mov	r3, r21
	GICR=(1<<INT1)|(1<<INT0);
     482:	40 ec       	ldi	r20, 0xC0	; 192
     484:	24 2e       	mov	r2, r20
		LCDWriteStringXY(1,0,"Temp");
		celsius = (ADC_Read(0)*4.88);
	   celsius = (celsius/10.00);
	   if( (int)celsius > targetTemp ){
			PORTD = 0x01;
		   sprintf(Temperature,"%d%cC  ", (int)celsius, degree_sysmbol);/* convert integer value to ASCII string */
     486:	5e 01       	movw	r10, r28
     488:	08 94       	sec
     48a:	a1 1c       	adc	r10, r1
     48c:	b1 1c       	adc	r11, r1
     48e:	35 e6       	ldi	r19, 0x65	; 101
     490:	63 2e       	mov	r6, r19
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	73 2e       	mov	r7, r19
     496:	2f ed       	ldi	r18, 0xDF	; 223
     498:	42 2e       	mov	r4, r18
     49a:	51 2c       	mov	r5, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     49c:	92 e3       	ldi	r25, 0x32	; 50
     49e:	c9 2e       	mov	r12, r25
     4a0:	d1 2c       	mov	r13, r1
	}
	
}
////FOR TIMER////
void initExtrnalInt(){
	MCUCR=(1<<ISC11)|(1<<ISC10)|(1<<ISC01)|(1<<ISC00);
     4a2:	80 e5       	ldi	r24, 0x50	; 80
     4a4:	88 2e       	mov	r8, r24
     4a6:	83 ec       	ldi	r24, 0xC3	; 195
     4a8:	98 2e       	mov	r9, r24
     4aa:	35 be       	out	0x35, r3	; 53
	GICR=(1<<INT1)|(1<<INT0);
     4ac:	2b be       	out	0x3b, r2	; 59
	sei();
     4ae:	78 94       	sei
	DDRA = DDRA & ~(1<<4) ;
	DDRA = DDRA & ~(1<<3) ;
	
	while(1){
	initExtrnalInt();
	initTimer0CTC();
     4b0:	0e 94 b0 01 	call	0x360	; 0x360 <initTimer0CTC>
	
	if(PIND & (1<<6) ){
     4b4:	86 9b       	sbis	0x10, 6	; 16
     4b6:	9d c0       	rjmp	.+314    	; 0x5f2 <main+0x1c8>
	
		if(PINA & (1<<4) ){
     4b8:	cc 9b       	sbis	0x19, 4	; 25
     4ba:	10 c0       	rjmp	.+32     	; 0x4dc <main+0xb2>
			targetTemp++;
     4bc:	80 91 c8 00 	lds	r24, 0x00C8
     4c0:	90 91 c9 00 	lds	r25, 0x00C9
     4c4:	01 96       	adiw	r24, 0x01	; 1
     4c6:	90 93 c9 00 	sts	0x00C9, r25
     4ca:	80 93 c8 00 	sts	0x00C8, r24
     4ce:	8c ea       	ldi	r24, 0xAC	; 172
     4d0:	9d e0       	ldi	r25, 0x0D	; 13
     4d2:	f6 01       	movw	r30, r12
     4d4:	31 97       	sbiw	r30, 0x01	; 1
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <main+0xaa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4da:	d9 f7       	brne	.-10     	; 0x4d2 <main+0xa8>
			_delay_ms(350);
		}
		if(PINA & (1<<3) ){
     4dc:	cb 9b       	sbis	0x19, 3	; 25
     4de:	12 c0       	rjmp	.+36     	; 0x504 <main+0xda>
			if(targetTemp!=0){
     4e0:	80 91 c8 00 	lds	r24, 0x00C8
     4e4:	90 91 c9 00 	lds	r25, 0x00C9
     4e8:	00 97       	sbiw	r24, 0x00	; 0
     4ea:	61 f0       	breq	.+24     	; 0x504 <main+0xda>
				targetTemp--;
     4ec:	01 97       	sbiw	r24, 0x01	; 1
     4ee:	90 93 c9 00 	sts	0x00C9, r25
     4f2:	80 93 c8 00 	sts	0x00C8, r24
     4f6:	8c ea       	ldi	r24, 0xAC	; 172
     4f8:	9d e0       	ldi	r25, 0x0D	; 13
     4fa:	f6 01       	movw	r30, r12
     4fc:	31 97       	sbiw	r30, 0x01	; 1
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <main+0xd2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     500:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     502:	d9 f7       	brne	.-10     	; 0x4fa <main+0xd0>
				_delay_ms(350);
			}
		}
	
	
		LCDClear();
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>
	
		LCDWriteStringXY(1,0,"Temp");
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>
     514:	80 e6       	ldi	r24, 0x60	; 96
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 9a 00 	call	0x134	; 0x134 <LCDWriteString>
		celsius = (ADC_Read(0)*4.88);
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <ADC_Read>
     522:	aa 27       	eor	r26, r26
     524:	97 fd       	sbrc	r25, 7
     526:	a0 95       	com	r26
     528:	ba 2f       	mov	r27, r26
     52a:	bc 01       	movw	r22, r24
     52c:	cd 01       	movw	r24, r26
     52e:	0e 94 ae 04 	call	0x95c	; 0x95c <__floatsisf>
     532:	26 ef       	ldi	r18, 0xF6	; 246
     534:	38 e2       	ldi	r19, 0x28	; 40
     536:	4c e9       	ldi	r20, 0x9C	; 156
     538:	50 e4       	ldi	r21, 0x40	; 64
     53a:	0e 94 3a 05 	call	0xa74	; 0xa74 <__mulsf3>
	   celsius = (celsius/10.00);
	   if( (int)celsius > targetTemp ){
     53e:	20 e0       	ldi	r18, 0x00	; 0
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	40 e2       	ldi	r20, 0x20	; 32
     544:	51 e4       	ldi	r21, 0x41	; 65
     546:	0e 94 13 04 	call	0x826	; 0x826 <__divsf3>
     54a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__fixsfsi>
     54e:	9b 01       	movw	r18, r22
     550:	ac 01       	movw	r20, r24
     552:	80 91 c8 00 	lds	r24, 0x00C8
     556:	90 91 c9 00 	lds	r25, 0x00C9
     55a:	82 17       	cp	r24, r18
     55c:	93 07       	cpc	r25, r19
     55e:	08 f0       	brcs	.+2      	; 0x562 <main+0x138>
     560:	46 c0       	rjmp	.+140    	; 0x5ee <main+0x1c4>
			PORTD = 0x01;
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	82 bb       	out	0x12, r24	; 18
		   sprintf(Temperature,"%d%cC  ", (int)celsius, degree_sysmbol);/* convert integer value to ASCII string */
     566:	8d b7       	in	r24, 0x3d	; 61
     568:	9e b7       	in	r25, 0x3e	; 62
     56a:	08 97       	sbiw	r24, 0x08	; 8
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	9e bf       	out	0x3e, r25	; 62
     572:	0f be       	out	0x3f, r0	; 63
     574:	8d bf       	out	0x3d, r24	; 61
     576:	ed b7       	in	r30, 0x3d	; 61
     578:	fe b7       	in	r31, 0x3e	; 62
     57a:	31 96       	adiw	r30, 0x01	; 1
     57c:	ad b7       	in	r26, 0x3d	; 61
     57e:	be b7       	in	r27, 0x3e	; 62
     580:	12 96       	adiw	r26, 0x02	; 2
     582:	bc 92       	st	X, r11
     584:	ae 92       	st	-X, r10
     586:	11 97       	sbiw	r26, 0x01	; 1
     588:	73 82       	std	Z+3, r7	; 0x03
     58a:	62 82       	std	Z+2, r6	; 0x02
     58c:	35 83       	std	Z+5, r19	; 0x05
     58e:	24 83       	std	Z+4, r18	; 0x04
     590:	57 82       	std	Z+7, r5	; 0x07
     592:	46 82       	std	Z+6, r4	; 0x06
     594:	0e 94 20 06 	call	0xc40	; 0xc40 <sprintf>
			LCDWriteStringXY(6,0,Temperature);/* send string data for printing */
     598:	ed b7       	in	r30, 0x3d	; 61
     59a:	fe b7       	in	r31, 0x3e	; 62
     59c:	38 96       	adiw	r30, 0x08	; 8
     59e:	0f b6       	in	r0, 0x3f	; 63
     5a0:	f8 94       	cli
     5a2:	fe bf       	out	0x3e, r31	; 62
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	ed bf       	out	0x3d, r30	; 61
     5a8:	86 e0       	ldi	r24, 0x06	; 6
     5aa:	60 e0       	ldi	r22, 0x00	; 0
     5ac:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>
     5b0:	c5 01       	movw	r24, r10
     5b2:	0e 94 9a 00 	call	0x134	; 0x134 <LCDWriteString>
		   LCDWriteStringXY(10,0,"|");
     5b6:	8a e0       	ldi	r24, 0x0A	; 10
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>
     5be:	8d e6       	ldi	r24, 0x6D	; 109
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 94 9a 00 	call	0x134	; 0x134 <LCDWriteString>
		   LCDWriteIntXY(11,0,targetTemp,2);	//changing temp   
     5c6:	8b e0       	ldi	r24, 0x0B	; 11
     5c8:	60 e0       	ldi	r22, 0x00	; 0
     5ca:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>
     5ce:	80 91 c8 00 	lds	r24, 0x00C8
     5d2:	90 91 c9 00 	lds	r25, 0x00C9
     5d6:	62 e0       	ldi	r22, 0x02	; 2
     5d8:	70 e0       	ldi	r23, 0x00	; 0
     5da:	0e 94 b4 00 	call	0x168	; 0x168 <LCDWriteInt>
     5de:	80 e1       	ldi	r24, 0x10	; 16
     5e0:	97 e2       	ldi	r25, 0x27	; 39
     5e2:	f6 01       	movw	r30, r12
     5e4:	31 97       	sbiw	r30, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <main+0x1ba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ea:	d9 f7       	brne	.-10     	; 0x5e2 <main+0x1b8>
     5ec:	5e cf       	rjmp	.-324    	; 0x4aa <main+0x80>
			_delay_ms(1000);
		}
		else{
			PORTD = 0x00;
     5ee:	12 ba       	out	0x12, r1	; 18
     5f0:	5c cf       	rjmp	.-328    	; 0x4aa <main+0x80>
		}
	
	}else{
		
		if(PIND & (1<<4) ){
     5f2:	84 9b       	sbis	0x10, 4	; 16
     5f4:	1a c0       	rjmp	.+52     	; 0x62a <main+0x200>
			time++;
     5f6:	80 91 d2 00 	lds	r24, 0x00D2
     5fa:	90 91 d3 00 	lds	r25, 0x00D3
     5fe:	a0 91 d4 00 	lds	r26, 0x00D4
     602:	b0 91 d5 00 	lds	r27, 0x00D5
     606:	01 96       	adiw	r24, 0x01	; 1
     608:	a1 1d       	adc	r26, r1
     60a:	b1 1d       	adc	r27, r1
     60c:	80 93 d2 00 	sts	0x00D2, r24
     610:	90 93 d3 00 	sts	0x00D3, r25
     614:	a0 93 d4 00 	sts	0x00D4, r26
     618:	b0 93 d5 00 	sts	0x00D5, r27
     61c:	8c ea       	ldi	r24, 0xAC	; 172
     61e:	9d e0       	ldi	r25, 0x0D	; 13
     620:	f6 01       	movw	r30, r12
     622:	31 97       	sbiw	r30, 0x01	; 1
     624:	f1 f7       	brne	.-4      	; 0x622 <main+0x1f8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     626:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     628:	d9 f7       	brne	.-10     	; 0x620 <main+0x1f6>
			_delay_ms(350);
		}
		if(PIND & (1<<5) ){
     62a:	85 9b       	sbis	0x10, 5	; 16
     62c:	1e c0       	rjmp	.+60     	; 0x66a <main+0x240>
			if(time!=0){
     62e:	80 91 d2 00 	lds	r24, 0x00D2
     632:	90 91 d3 00 	lds	r25, 0x00D3
     636:	a0 91 d4 00 	lds	r26, 0x00D4
     63a:	b0 91 d5 00 	lds	r27, 0x00D5
     63e:	00 97       	sbiw	r24, 0x00	; 0
     640:	a1 05       	cpc	r26, r1
     642:	b1 05       	cpc	r27, r1
     644:	91 f0       	breq	.+36     	; 0x66a <main+0x240>
				time--;
     646:	01 97       	sbiw	r24, 0x01	; 1
     648:	a1 09       	sbc	r26, r1
     64a:	b1 09       	sbc	r27, r1
     64c:	80 93 d2 00 	sts	0x00D2, r24
     650:	90 93 d3 00 	sts	0x00D3, r25
     654:	a0 93 d4 00 	sts	0x00D4, r26
     658:	b0 93 d5 00 	sts	0x00D5, r27
     65c:	8c ea       	ldi	r24, 0xAC	; 172
     65e:	9d e0       	ldi	r25, 0x0D	; 13
     660:	f6 01       	movw	r30, r12
     662:	31 97       	sbiw	r30, 0x01	; 1
     664:	f1 f7       	brne	.-4      	; 0x662 <main+0x238>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     666:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     668:	d9 f7       	brne	.-10     	; 0x660 <main+0x236>
				_delay_ms(350);
			}
		}
		
		LCDClear();
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	60 e0       	ldi	r22, 0x00	; 0
     66e:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>
		
		LCDWriteIntXY(0,1,(((disp+val2)%100000)/10)/100,2);
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>
     67a:	60 91 ce 00 	lds	r22, 0x00CE
     67e:	70 91 cf 00 	lds	r23, 0x00CF
     682:	20 91 d0 00 	lds	r18, 0x00D0
     686:	30 91 d1 00 	lds	r19, 0x00D1
     68a:	62 0f       	add	r22, r18
     68c:	73 1f       	adc	r23, r19
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	20 ea       	ldi	r18, 0xA0	; 160
     694:	36 e8       	ldi	r19, 0x86	; 134
     696:	41 e0       	ldi	r20, 0x01	; 1
     698:	50 e0       	ldi	r21, 0x00	; 0
     69a:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__divmodsi4>
     69e:	28 ee       	ldi	r18, 0xE8	; 232
     6a0:	33 e0       	ldi	r19, 0x03	; 3
     6a2:	40 e0       	ldi	r20, 0x00	; 0
     6a4:	50 e0       	ldi	r21, 0x00	; 0
     6a6:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__divmodsi4>
     6aa:	da 01       	movw	r26, r20
     6ac:	c9 01       	movw	r24, r18
     6ae:	62 e0       	ldi	r22, 0x02	; 2
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	0e 94 b4 00 	call	0x168	; 0x168 <LCDWriteInt>
		LCDWriteStringXY(2,1,".");
     6b6:	82 e0       	ldi	r24, 0x02	; 2
     6b8:	61 e0       	ldi	r22, 0x01	; 1
     6ba:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>
     6be:	8f e6       	ldi	r24, 0x6F	; 111
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 9a 00 	call	0x134	; 0x134 <LCDWriteString>
		LCDWriteIntXY(3,1,(((disp+val2)%100000)/10)%100,2);
     6c6:	83 e0       	ldi	r24, 0x03	; 3
     6c8:	61 e0       	ldi	r22, 0x01	; 1
     6ca:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>
     6ce:	60 91 ce 00 	lds	r22, 0x00CE
     6d2:	70 91 cf 00 	lds	r23, 0x00CF
     6d6:	20 91 d0 00 	lds	r18, 0x00D0
     6da:	30 91 d1 00 	lds	r19, 0x00D1
     6de:	62 0f       	add	r22, r18
     6e0:	73 1f       	adc	r23, r19
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	20 ea       	ldi	r18, 0xA0	; 160
     6e8:	36 e8       	ldi	r19, 0x86	; 134
     6ea:	41 e0       	ldi	r20, 0x01	; 1
     6ec:	50 e0       	ldi	r21, 0x00	; 0
     6ee:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__divmodsi4>
     6f2:	2a e0       	ldi	r18, 0x0A	; 10
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__divmodsi4>
     6fe:	ca 01       	movw	r24, r20
     700:	b9 01       	movw	r22, r18
     702:	24 e6       	ldi	r18, 0x64	; 100
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	40 e0       	ldi	r20, 0x00	; 0
     708:	50 e0       	ldi	r21, 0x00	; 0
     70a:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__divmodsi4>
     70e:	dc 01       	movw	r26, r24
     710:	cb 01       	movw	r24, r22
     712:	62 e0       	ldi	r22, 0x02	; 2
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	0e 94 b4 00 	call	0x168	; 0x168 <LCDWriteInt>
		LCDWriteStringXY(5,1,".");
     71a:	85 e0       	ldi	r24, 0x05	; 5
     71c:	61 e0       	ldi	r22, 0x01	; 1
     71e:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>
     722:	8f e6       	ldi	r24, 0x6F	; 111
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 9a 00 	call	0x134	; 0x134 <LCDWriteString>
		LCDWriteIntXY(6,1,(disp+val2)%10,1);
     72a:	86 e0       	ldi	r24, 0x06	; 6
     72c:	61 e0       	ldi	r22, 0x01	; 1
     72e:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>
     732:	80 91 ce 00 	lds	r24, 0x00CE
     736:	90 91 cf 00 	lds	r25, 0x00CF
     73a:	20 91 d0 00 	lds	r18, 0x00D0
     73e:	30 91 d1 00 	lds	r19, 0x00D1
     742:	82 0f       	add	r24, r18
     744:	93 1f       	adc	r25, r19
     746:	6a e0       	ldi	r22, 0x0A	; 10
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	0e 94 bc 05 	call	0xb78	; 0xb78 <__udivmodhi4>
     74e:	61 e0       	ldi	r22, 0x01	; 1
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	0e 94 b4 00 	call	0x168	; 0x168 <LCDWriteInt>
		if(time!=0){
     756:	80 91 d2 00 	lds	r24, 0x00D2
     75a:	90 91 d3 00 	lds	r25, 0x00D3
     75e:	a0 91 d4 00 	lds	r26, 0x00D4
     762:	b0 91 d5 00 	lds	r27, 0x00D5
     766:	00 97       	sbiw	r24, 0x00	; 0
     768:	a1 05       	cpc	r26, r1
     76a:	b1 05       	cpc	r27, r1
     76c:	b9 f1       	breq	.+110    	; 0x7dc <main+0x3b2>
		LCDWriteStringXY(2,0,"Timer Started");
     76e:	82 e0       	ldi	r24, 0x02	; 2
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>
     776:	81 e7       	ldi	r24, 0x71	; 113
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 9a 00 	call	0x134	; 0x134 <LCDWriteString>
			if(val2==time*1000){
     77e:	e0 90 ce 00 	lds	r14, 0x00CE
     782:	f0 90 cf 00 	lds	r15, 0x00CF
     786:	00 e0       	ldi	r16, 0x00	; 0
     788:	10 e0       	ldi	r17, 0x00	; 0
     78a:	60 91 d2 00 	lds	r22, 0x00D2
     78e:	70 91 d3 00 	lds	r23, 0x00D3
     792:	80 91 d4 00 	lds	r24, 0x00D4
     796:	90 91 d5 00 	lds	r25, 0x00D5
     79a:	28 ee       	ldi	r18, 0xE8	; 232
     79c:	33 e0       	ldi	r19, 0x03	; 3
     79e:	40 e0       	ldi	r20, 0x00	; 0
     7a0:	50 e0       	ldi	r21, 0x00	; 0
     7a2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__mulsi3>
     7a6:	e6 16       	cp	r14, r22
     7a8:	f7 06       	cpc	r15, r23
     7aa:	08 07       	cpc	r16, r24
     7ac:	19 07       	cpc	r17, r25
     7ae:	b1 f4       	brne	.+44     	; 0x7dc <main+0x3b2>
			
				r=1;
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	90 93 c5 00 	sts	0x00C5, r25
     7b8:	80 93 c4 00 	sts	0x00C4, r24
				val2=0;
     7bc:	10 92 cf 00 	sts	0x00CF, r1
     7c0:	10 92 ce 00 	sts	0x00CE, r1
				disp=0;
     7c4:	10 92 d1 00 	sts	0x00D1, r1
     7c8:	10 92 d0 00 	sts	0x00D0, r1
				LCDWriteStringXY(4,0,"Time up!");
     7cc:	84 e0       	ldi	r24, 0x04	; 4
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>
     7d4:	8f e7       	ldi	r24, 0x7F	; 127
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 9a 00 	call	0x134	; 0x134 <LCDWriteString>
			}
		}
		LCDWriteStringXY(9,1,"|");
     7dc:	89 e0       	ldi	r24, 0x09	; 9
     7de:	61 e0       	ldi	r22, 0x01	; 1
     7e0:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>
     7e4:	8d e6       	ldi	r24, 0x6D	; 109
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	0e 94 9a 00 	call	0x134	; 0x134 <LCDWriteString>
		LCDWriteIntXY(10,1,time,2);
     7ec:	8a e0       	ldi	r24, 0x0A	; 10
     7ee:	61 e0       	ldi	r22, 0x01	; 1
     7f0:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>
     7f4:	80 91 d2 00 	lds	r24, 0x00D2
     7f8:	90 91 d3 00 	lds	r25, 0x00D3
     7fc:	62 e0       	ldi	r22, 0x02	; 2
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	0e 94 b4 00 	call	0x168	; 0x168 <LCDWriteInt>
		LCDWriteStringXY(12,1,"Min");
     804:	8c e0       	ldi	r24, 0x0C	; 12
     806:	61 e0       	ldi	r22, 0x01	; 1
     808:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>
     80c:	88 e8       	ldi	r24, 0x88	; 136
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	0e 94 9a 00 	call	0x134	; 0x134 <LCDWriteString>
     814:	c4 01       	movw	r24, r8
     816:	01 97       	sbiw	r24, 0x01	; 1
     818:	f1 f7       	brne	.-4      	; 0x816 <main+0x3ec>
		_delay_ms(100);
		 memset(Temperature,0,10);
     81a:	8a e0       	ldi	r24, 0x0A	; 10
     81c:	d5 01       	movw	r26, r10
     81e:	1d 92       	st	X+, r1
     820:	8a 95       	dec	r24
     822:	e9 f7       	brne	.-6      	; 0x81e <main+0x3f4>
     824:	42 ce       	rjmp	.-892    	; 0x4aa <main+0x80>

00000826 <__divsf3>:
     826:	0c d0       	rcall	.+24     	; 0x840 <__divsf3x>
     828:	eb c0       	rjmp	.+470    	; 0xa00 <__fp_round>
     82a:	e3 d0       	rcall	.+454    	; 0x9f2 <__fp_pscB>
     82c:	40 f0       	brcs	.+16     	; 0x83e <__divsf3+0x18>
     82e:	da d0       	rcall	.+436    	; 0x9e4 <__fp_pscA>
     830:	30 f0       	brcs	.+12     	; 0x83e <__divsf3+0x18>
     832:	21 f4       	brne	.+8      	; 0x83c <__divsf3+0x16>
     834:	5f 3f       	cpi	r21, 0xFF	; 255
     836:	19 f0       	breq	.+6      	; 0x83e <__divsf3+0x18>
     838:	cc c0       	rjmp	.+408    	; 0x9d2 <__fp_inf>
     83a:	51 11       	cpse	r21, r1
     83c:	15 c1       	rjmp	.+554    	; 0xa68 <__fp_szero>
     83e:	cf c0       	rjmp	.+414    	; 0x9de <__fp_nan>

00000840 <__divsf3x>:
     840:	f0 d0       	rcall	.+480    	; 0xa22 <__fp_split3>
     842:	98 f3       	brcs	.-26     	; 0x82a <__divsf3+0x4>

00000844 <__divsf3_pse>:
     844:	99 23       	and	r25, r25
     846:	c9 f3       	breq	.-14     	; 0x83a <__divsf3+0x14>
     848:	55 23       	and	r21, r21
     84a:	b1 f3       	breq	.-20     	; 0x838 <__divsf3+0x12>
     84c:	95 1b       	sub	r25, r21
     84e:	55 0b       	sbc	r21, r21
     850:	bb 27       	eor	r27, r27
     852:	aa 27       	eor	r26, r26
     854:	62 17       	cp	r22, r18
     856:	73 07       	cpc	r23, r19
     858:	84 07       	cpc	r24, r20
     85a:	38 f0       	brcs	.+14     	; 0x86a <__stack+0xb>
     85c:	9f 5f       	subi	r25, 0xFF	; 255
     85e:	5f 4f       	sbci	r21, 0xFF	; 255
     860:	22 0f       	add	r18, r18
     862:	33 1f       	adc	r19, r19
     864:	44 1f       	adc	r20, r20
     866:	aa 1f       	adc	r26, r26
     868:	a9 f3       	breq	.-22     	; 0x854 <__divsf3_pse+0x10>
     86a:	33 d0       	rcall	.+102    	; 0x8d2 <__stack+0x73>
     86c:	0e 2e       	mov	r0, r30
     86e:	3a f0       	brmi	.+14     	; 0x87e <__stack+0x1f>
     870:	e0 e8       	ldi	r30, 0x80	; 128
     872:	30 d0       	rcall	.+96     	; 0x8d4 <__stack+0x75>
     874:	91 50       	subi	r25, 0x01	; 1
     876:	50 40       	sbci	r21, 0x00	; 0
     878:	e6 95       	lsr	r30
     87a:	00 1c       	adc	r0, r0
     87c:	ca f7       	brpl	.-14     	; 0x870 <__stack+0x11>
     87e:	29 d0       	rcall	.+82     	; 0x8d2 <__stack+0x73>
     880:	fe 2f       	mov	r31, r30
     882:	27 d0       	rcall	.+78     	; 0x8d2 <__stack+0x73>
     884:	66 0f       	add	r22, r22
     886:	77 1f       	adc	r23, r23
     888:	88 1f       	adc	r24, r24
     88a:	bb 1f       	adc	r27, r27
     88c:	26 17       	cp	r18, r22
     88e:	37 07       	cpc	r19, r23
     890:	48 07       	cpc	r20, r24
     892:	ab 07       	cpc	r26, r27
     894:	b0 e8       	ldi	r27, 0x80	; 128
     896:	09 f0       	breq	.+2      	; 0x89a <__stack+0x3b>
     898:	bb 0b       	sbc	r27, r27
     89a:	80 2d       	mov	r24, r0
     89c:	bf 01       	movw	r22, r30
     89e:	ff 27       	eor	r31, r31
     8a0:	93 58       	subi	r25, 0x83	; 131
     8a2:	5f 4f       	sbci	r21, 0xFF	; 255
     8a4:	2a f0       	brmi	.+10     	; 0x8b0 <__stack+0x51>
     8a6:	9e 3f       	cpi	r25, 0xFE	; 254
     8a8:	51 05       	cpc	r21, r1
     8aa:	68 f0       	brcs	.+26     	; 0x8c6 <__stack+0x67>
     8ac:	92 c0       	rjmp	.+292    	; 0x9d2 <__fp_inf>
     8ae:	dc c0       	rjmp	.+440    	; 0xa68 <__fp_szero>
     8b0:	5f 3f       	cpi	r21, 0xFF	; 255
     8b2:	ec f3       	brlt	.-6      	; 0x8ae <__stack+0x4f>
     8b4:	98 3e       	cpi	r25, 0xE8	; 232
     8b6:	dc f3       	brlt	.-10     	; 0x8ae <__stack+0x4f>
     8b8:	86 95       	lsr	r24
     8ba:	77 95       	ror	r23
     8bc:	67 95       	ror	r22
     8be:	b7 95       	ror	r27
     8c0:	f7 95       	ror	r31
     8c2:	9f 5f       	subi	r25, 0xFF	; 255
     8c4:	c9 f7       	brne	.-14     	; 0x8b8 <__stack+0x59>
     8c6:	88 0f       	add	r24, r24
     8c8:	91 1d       	adc	r25, r1
     8ca:	96 95       	lsr	r25
     8cc:	87 95       	ror	r24
     8ce:	97 f9       	bld	r25, 7
     8d0:	08 95       	ret
     8d2:	e1 e0       	ldi	r30, 0x01	; 1
     8d4:	66 0f       	add	r22, r22
     8d6:	77 1f       	adc	r23, r23
     8d8:	88 1f       	adc	r24, r24
     8da:	bb 1f       	adc	r27, r27
     8dc:	62 17       	cp	r22, r18
     8de:	73 07       	cpc	r23, r19
     8e0:	84 07       	cpc	r24, r20
     8e2:	ba 07       	cpc	r27, r26
     8e4:	20 f0       	brcs	.+8      	; 0x8ee <__stack+0x8f>
     8e6:	62 1b       	sub	r22, r18
     8e8:	73 0b       	sbc	r23, r19
     8ea:	84 0b       	sbc	r24, r20
     8ec:	ba 0b       	sbc	r27, r26
     8ee:	ee 1f       	adc	r30, r30
     8f0:	88 f7       	brcc	.-30     	; 0x8d4 <__stack+0x75>
     8f2:	e0 95       	com	r30
     8f4:	08 95       	ret

000008f6 <__fixsfsi>:
     8f6:	04 d0       	rcall	.+8      	; 0x900 <__fixunssfsi>
     8f8:	68 94       	set
     8fa:	b1 11       	cpse	r27, r1
     8fc:	b5 c0       	rjmp	.+362    	; 0xa68 <__fp_szero>
     8fe:	08 95       	ret

00000900 <__fixunssfsi>:
     900:	98 d0       	rcall	.+304    	; 0xa32 <__fp_splitA>
     902:	88 f0       	brcs	.+34     	; 0x926 <__fixunssfsi+0x26>
     904:	9f 57       	subi	r25, 0x7F	; 127
     906:	90 f0       	brcs	.+36     	; 0x92c <__fixunssfsi+0x2c>
     908:	b9 2f       	mov	r27, r25
     90a:	99 27       	eor	r25, r25
     90c:	b7 51       	subi	r27, 0x17	; 23
     90e:	a0 f0       	brcs	.+40     	; 0x938 <__fixunssfsi+0x38>
     910:	d1 f0       	breq	.+52     	; 0x946 <__fixunssfsi+0x46>
     912:	66 0f       	add	r22, r22
     914:	77 1f       	adc	r23, r23
     916:	88 1f       	adc	r24, r24
     918:	99 1f       	adc	r25, r25
     91a:	1a f0       	brmi	.+6      	; 0x922 <__fixunssfsi+0x22>
     91c:	ba 95       	dec	r27
     91e:	c9 f7       	brne	.-14     	; 0x912 <__fixunssfsi+0x12>
     920:	12 c0       	rjmp	.+36     	; 0x946 <__fixunssfsi+0x46>
     922:	b1 30       	cpi	r27, 0x01	; 1
     924:	81 f0       	breq	.+32     	; 0x946 <__fixunssfsi+0x46>
     926:	9f d0       	rcall	.+318    	; 0xa66 <__fp_zero>
     928:	b1 e0       	ldi	r27, 0x01	; 1
     92a:	08 95       	ret
     92c:	9c c0       	rjmp	.+312    	; 0xa66 <__fp_zero>
     92e:	67 2f       	mov	r22, r23
     930:	78 2f       	mov	r23, r24
     932:	88 27       	eor	r24, r24
     934:	b8 5f       	subi	r27, 0xF8	; 248
     936:	39 f0       	breq	.+14     	; 0x946 <__fixunssfsi+0x46>
     938:	b9 3f       	cpi	r27, 0xF9	; 249
     93a:	cc f3       	brlt	.-14     	; 0x92e <__fixunssfsi+0x2e>
     93c:	86 95       	lsr	r24
     93e:	77 95       	ror	r23
     940:	67 95       	ror	r22
     942:	b3 95       	inc	r27
     944:	d9 f7       	brne	.-10     	; 0x93c <__fixunssfsi+0x3c>
     946:	3e f4       	brtc	.+14     	; 0x956 <__fixunssfsi+0x56>
     948:	90 95       	com	r25
     94a:	80 95       	com	r24
     94c:	70 95       	com	r23
     94e:	61 95       	neg	r22
     950:	7f 4f       	sbci	r23, 0xFF	; 255
     952:	8f 4f       	sbci	r24, 0xFF	; 255
     954:	9f 4f       	sbci	r25, 0xFF	; 255
     956:	08 95       	ret

00000958 <__floatunsisf>:
     958:	e8 94       	clt
     95a:	09 c0       	rjmp	.+18     	; 0x96e <__floatsisf+0x12>

0000095c <__floatsisf>:
     95c:	97 fb       	bst	r25, 7
     95e:	3e f4       	brtc	.+14     	; 0x96e <__floatsisf+0x12>
     960:	90 95       	com	r25
     962:	80 95       	com	r24
     964:	70 95       	com	r23
     966:	61 95       	neg	r22
     968:	7f 4f       	sbci	r23, 0xFF	; 255
     96a:	8f 4f       	sbci	r24, 0xFF	; 255
     96c:	9f 4f       	sbci	r25, 0xFF	; 255
     96e:	99 23       	and	r25, r25
     970:	a9 f0       	breq	.+42     	; 0x99c <__floatsisf+0x40>
     972:	f9 2f       	mov	r31, r25
     974:	96 e9       	ldi	r25, 0x96	; 150
     976:	bb 27       	eor	r27, r27
     978:	93 95       	inc	r25
     97a:	f6 95       	lsr	r31
     97c:	87 95       	ror	r24
     97e:	77 95       	ror	r23
     980:	67 95       	ror	r22
     982:	b7 95       	ror	r27
     984:	f1 11       	cpse	r31, r1
     986:	f8 cf       	rjmp	.-16     	; 0x978 <__floatsisf+0x1c>
     988:	fa f4       	brpl	.+62     	; 0x9c8 <__floatsisf+0x6c>
     98a:	bb 0f       	add	r27, r27
     98c:	11 f4       	brne	.+4      	; 0x992 <__floatsisf+0x36>
     98e:	60 ff       	sbrs	r22, 0
     990:	1b c0       	rjmp	.+54     	; 0x9c8 <__floatsisf+0x6c>
     992:	6f 5f       	subi	r22, 0xFF	; 255
     994:	7f 4f       	sbci	r23, 0xFF	; 255
     996:	8f 4f       	sbci	r24, 0xFF	; 255
     998:	9f 4f       	sbci	r25, 0xFF	; 255
     99a:	16 c0       	rjmp	.+44     	; 0x9c8 <__floatsisf+0x6c>
     99c:	88 23       	and	r24, r24
     99e:	11 f0       	breq	.+4      	; 0x9a4 <__floatsisf+0x48>
     9a0:	96 e9       	ldi	r25, 0x96	; 150
     9a2:	11 c0       	rjmp	.+34     	; 0x9c6 <__floatsisf+0x6a>
     9a4:	77 23       	and	r23, r23
     9a6:	21 f0       	breq	.+8      	; 0x9b0 <__floatsisf+0x54>
     9a8:	9e e8       	ldi	r25, 0x8E	; 142
     9aa:	87 2f       	mov	r24, r23
     9ac:	76 2f       	mov	r23, r22
     9ae:	05 c0       	rjmp	.+10     	; 0x9ba <__floatsisf+0x5e>
     9b0:	66 23       	and	r22, r22
     9b2:	71 f0       	breq	.+28     	; 0x9d0 <__floatsisf+0x74>
     9b4:	96 e8       	ldi	r25, 0x86	; 134
     9b6:	86 2f       	mov	r24, r22
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	60 e0       	ldi	r22, 0x00	; 0
     9bc:	2a f0       	brmi	.+10     	; 0x9c8 <__floatsisf+0x6c>
     9be:	9a 95       	dec	r25
     9c0:	66 0f       	add	r22, r22
     9c2:	77 1f       	adc	r23, r23
     9c4:	88 1f       	adc	r24, r24
     9c6:	da f7       	brpl	.-10     	; 0x9be <__floatsisf+0x62>
     9c8:	88 0f       	add	r24, r24
     9ca:	96 95       	lsr	r25
     9cc:	87 95       	ror	r24
     9ce:	97 f9       	bld	r25, 7
     9d0:	08 95       	ret

000009d2 <__fp_inf>:
     9d2:	97 f9       	bld	r25, 7
     9d4:	9f 67       	ori	r25, 0x7F	; 127
     9d6:	80 e8       	ldi	r24, 0x80	; 128
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	08 95       	ret

000009de <__fp_nan>:
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	80 ec       	ldi	r24, 0xC0	; 192
     9e2:	08 95       	ret

000009e4 <__fp_pscA>:
     9e4:	00 24       	eor	r0, r0
     9e6:	0a 94       	dec	r0
     9e8:	16 16       	cp	r1, r22
     9ea:	17 06       	cpc	r1, r23
     9ec:	18 06       	cpc	r1, r24
     9ee:	09 06       	cpc	r0, r25
     9f0:	08 95       	ret

000009f2 <__fp_pscB>:
     9f2:	00 24       	eor	r0, r0
     9f4:	0a 94       	dec	r0
     9f6:	12 16       	cp	r1, r18
     9f8:	13 06       	cpc	r1, r19
     9fa:	14 06       	cpc	r1, r20
     9fc:	05 06       	cpc	r0, r21
     9fe:	08 95       	ret

00000a00 <__fp_round>:
     a00:	09 2e       	mov	r0, r25
     a02:	03 94       	inc	r0
     a04:	00 0c       	add	r0, r0
     a06:	11 f4       	brne	.+4      	; 0xa0c <__fp_round+0xc>
     a08:	88 23       	and	r24, r24
     a0a:	52 f0       	brmi	.+20     	; 0xa20 <__fp_round+0x20>
     a0c:	bb 0f       	add	r27, r27
     a0e:	40 f4       	brcc	.+16     	; 0xa20 <__fp_round+0x20>
     a10:	bf 2b       	or	r27, r31
     a12:	11 f4       	brne	.+4      	; 0xa18 <__fp_round+0x18>
     a14:	60 ff       	sbrs	r22, 0
     a16:	04 c0       	rjmp	.+8      	; 0xa20 <__fp_round+0x20>
     a18:	6f 5f       	subi	r22, 0xFF	; 255
     a1a:	7f 4f       	sbci	r23, 0xFF	; 255
     a1c:	8f 4f       	sbci	r24, 0xFF	; 255
     a1e:	9f 4f       	sbci	r25, 0xFF	; 255
     a20:	08 95       	ret

00000a22 <__fp_split3>:
     a22:	57 fd       	sbrc	r21, 7
     a24:	90 58       	subi	r25, 0x80	; 128
     a26:	44 0f       	add	r20, r20
     a28:	55 1f       	adc	r21, r21
     a2a:	59 f0       	breq	.+22     	; 0xa42 <__fp_splitA+0x10>
     a2c:	5f 3f       	cpi	r21, 0xFF	; 255
     a2e:	71 f0       	breq	.+28     	; 0xa4c <__fp_splitA+0x1a>
     a30:	47 95       	ror	r20

00000a32 <__fp_splitA>:
     a32:	88 0f       	add	r24, r24
     a34:	97 fb       	bst	r25, 7
     a36:	99 1f       	adc	r25, r25
     a38:	61 f0       	breq	.+24     	; 0xa52 <__fp_splitA+0x20>
     a3a:	9f 3f       	cpi	r25, 0xFF	; 255
     a3c:	79 f0       	breq	.+30     	; 0xa5c <__fp_splitA+0x2a>
     a3e:	87 95       	ror	r24
     a40:	08 95       	ret
     a42:	12 16       	cp	r1, r18
     a44:	13 06       	cpc	r1, r19
     a46:	14 06       	cpc	r1, r20
     a48:	55 1f       	adc	r21, r21
     a4a:	f2 cf       	rjmp	.-28     	; 0xa30 <__fp_split3+0xe>
     a4c:	46 95       	lsr	r20
     a4e:	f1 df       	rcall	.-30     	; 0xa32 <__fp_splitA>
     a50:	08 c0       	rjmp	.+16     	; 0xa62 <__fp_splitA+0x30>
     a52:	16 16       	cp	r1, r22
     a54:	17 06       	cpc	r1, r23
     a56:	18 06       	cpc	r1, r24
     a58:	99 1f       	adc	r25, r25
     a5a:	f1 cf       	rjmp	.-30     	; 0xa3e <__fp_splitA+0xc>
     a5c:	86 95       	lsr	r24
     a5e:	71 05       	cpc	r23, r1
     a60:	61 05       	cpc	r22, r1
     a62:	08 94       	sec
     a64:	08 95       	ret

00000a66 <__fp_zero>:
     a66:	e8 94       	clt

00000a68 <__fp_szero>:
     a68:	bb 27       	eor	r27, r27
     a6a:	66 27       	eor	r22, r22
     a6c:	77 27       	eor	r23, r23
     a6e:	cb 01       	movw	r24, r22
     a70:	97 f9       	bld	r25, 7
     a72:	08 95       	ret

00000a74 <__mulsf3>:
     a74:	0b d0       	rcall	.+22     	; 0xa8c <__mulsf3x>
     a76:	c4 cf       	rjmp	.-120    	; 0xa00 <__fp_round>
     a78:	b5 df       	rcall	.-150    	; 0x9e4 <__fp_pscA>
     a7a:	28 f0       	brcs	.+10     	; 0xa86 <__mulsf3+0x12>
     a7c:	ba df       	rcall	.-140    	; 0x9f2 <__fp_pscB>
     a7e:	18 f0       	brcs	.+6      	; 0xa86 <__mulsf3+0x12>
     a80:	95 23       	and	r25, r21
     a82:	09 f0       	breq	.+2      	; 0xa86 <__mulsf3+0x12>
     a84:	a6 cf       	rjmp	.-180    	; 0x9d2 <__fp_inf>
     a86:	ab cf       	rjmp	.-170    	; 0x9de <__fp_nan>
     a88:	11 24       	eor	r1, r1
     a8a:	ee cf       	rjmp	.-36     	; 0xa68 <__fp_szero>

00000a8c <__mulsf3x>:
     a8c:	ca df       	rcall	.-108    	; 0xa22 <__fp_split3>
     a8e:	a0 f3       	brcs	.-24     	; 0xa78 <__mulsf3+0x4>

00000a90 <__mulsf3_pse>:
     a90:	95 9f       	mul	r25, r21
     a92:	d1 f3       	breq	.-12     	; 0xa88 <__mulsf3+0x14>
     a94:	95 0f       	add	r25, r21
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	55 1f       	adc	r21, r21
     a9a:	62 9f       	mul	r22, r18
     a9c:	f0 01       	movw	r30, r0
     a9e:	72 9f       	mul	r23, r18
     aa0:	bb 27       	eor	r27, r27
     aa2:	f0 0d       	add	r31, r0
     aa4:	b1 1d       	adc	r27, r1
     aa6:	63 9f       	mul	r22, r19
     aa8:	aa 27       	eor	r26, r26
     aaa:	f0 0d       	add	r31, r0
     aac:	b1 1d       	adc	r27, r1
     aae:	aa 1f       	adc	r26, r26
     ab0:	64 9f       	mul	r22, r20
     ab2:	66 27       	eor	r22, r22
     ab4:	b0 0d       	add	r27, r0
     ab6:	a1 1d       	adc	r26, r1
     ab8:	66 1f       	adc	r22, r22
     aba:	82 9f       	mul	r24, r18
     abc:	22 27       	eor	r18, r18
     abe:	b0 0d       	add	r27, r0
     ac0:	a1 1d       	adc	r26, r1
     ac2:	62 1f       	adc	r22, r18
     ac4:	73 9f       	mul	r23, r19
     ac6:	b0 0d       	add	r27, r0
     ac8:	a1 1d       	adc	r26, r1
     aca:	62 1f       	adc	r22, r18
     acc:	83 9f       	mul	r24, r19
     ace:	a0 0d       	add	r26, r0
     ad0:	61 1d       	adc	r22, r1
     ad2:	22 1f       	adc	r18, r18
     ad4:	74 9f       	mul	r23, r20
     ad6:	33 27       	eor	r19, r19
     ad8:	a0 0d       	add	r26, r0
     ada:	61 1d       	adc	r22, r1
     adc:	23 1f       	adc	r18, r19
     ade:	84 9f       	mul	r24, r20
     ae0:	60 0d       	add	r22, r0
     ae2:	21 1d       	adc	r18, r1
     ae4:	82 2f       	mov	r24, r18
     ae6:	76 2f       	mov	r23, r22
     ae8:	6a 2f       	mov	r22, r26
     aea:	11 24       	eor	r1, r1
     aec:	9f 57       	subi	r25, 0x7F	; 127
     aee:	50 40       	sbci	r21, 0x00	; 0
     af0:	8a f0       	brmi	.+34     	; 0xb14 <__mulsf3_pse+0x84>
     af2:	e1 f0       	breq	.+56     	; 0xb2c <__mulsf3_pse+0x9c>
     af4:	88 23       	and	r24, r24
     af6:	4a f0       	brmi	.+18     	; 0xb0a <__mulsf3_pse+0x7a>
     af8:	ee 0f       	add	r30, r30
     afa:	ff 1f       	adc	r31, r31
     afc:	bb 1f       	adc	r27, r27
     afe:	66 1f       	adc	r22, r22
     b00:	77 1f       	adc	r23, r23
     b02:	88 1f       	adc	r24, r24
     b04:	91 50       	subi	r25, 0x01	; 1
     b06:	50 40       	sbci	r21, 0x00	; 0
     b08:	a9 f7       	brne	.-22     	; 0xaf4 <__mulsf3_pse+0x64>
     b0a:	9e 3f       	cpi	r25, 0xFE	; 254
     b0c:	51 05       	cpc	r21, r1
     b0e:	70 f0       	brcs	.+28     	; 0xb2c <__mulsf3_pse+0x9c>
     b10:	60 cf       	rjmp	.-320    	; 0x9d2 <__fp_inf>
     b12:	aa cf       	rjmp	.-172    	; 0xa68 <__fp_szero>
     b14:	5f 3f       	cpi	r21, 0xFF	; 255
     b16:	ec f3       	brlt	.-6      	; 0xb12 <__mulsf3_pse+0x82>
     b18:	98 3e       	cpi	r25, 0xE8	; 232
     b1a:	dc f3       	brlt	.-10     	; 0xb12 <__mulsf3_pse+0x82>
     b1c:	86 95       	lsr	r24
     b1e:	77 95       	ror	r23
     b20:	67 95       	ror	r22
     b22:	b7 95       	ror	r27
     b24:	f7 95       	ror	r31
     b26:	e7 95       	ror	r30
     b28:	9f 5f       	subi	r25, 0xFF	; 255
     b2a:	c1 f7       	brne	.-16     	; 0xb1c <__mulsf3_pse+0x8c>
     b2c:	fe 2b       	or	r31, r30
     b2e:	88 0f       	add	r24, r24
     b30:	91 1d       	adc	r25, r1
     b32:	96 95       	lsr	r25
     b34:	87 95       	ror	r24
     b36:	97 f9       	bld	r25, 7
     b38:	08 95       	ret

00000b3a <__mulsi3>:
     b3a:	62 9f       	mul	r22, r18
     b3c:	d0 01       	movw	r26, r0
     b3e:	73 9f       	mul	r23, r19
     b40:	f0 01       	movw	r30, r0
     b42:	82 9f       	mul	r24, r18
     b44:	e0 0d       	add	r30, r0
     b46:	f1 1d       	adc	r31, r1
     b48:	64 9f       	mul	r22, r20
     b4a:	e0 0d       	add	r30, r0
     b4c:	f1 1d       	adc	r31, r1
     b4e:	92 9f       	mul	r25, r18
     b50:	f0 0d       	add	r31, r0
     b52:	83 9f       	mul	r24, r19
     b54:	f0 0d       	add	r31, r0
     b56:	74 9f       	mul	r23, r20
     b58:	f0 0d       	add	r31, r0
     b5a:	65 9f       	mul	r22, r21
     b5c:	f0 0d       	add	r31, r0
     b5e:	99 27       	eor	r25, r25
     b60:	72 9f       	mul	r23, r18
     b62:	b0 0d       	add	r27, r0
     b64:	e1 1d       	adc	r30, r1
     b66:	f9 1f       	adc	r31, r25
     b68:	63 9f       	mul	r22, r19
     b6a:	b0 0d       	add	r27, r0
     b6c:	e1 1d       	adc	r30, r1
     b6e:	f9 1f       	adc	r31, r25
     b70:	bd 01       	movw	r22, r26
     b72:	cf 01       	movw	r24, r30
     b74:	11 24       	eor	r1, r1
     b76:	08 95       	ret

00000b78 <__udivmodhi4>:
     b78:	aa 1b       	sub	r26, r26
     b7a:	bb 1b       	sub	r27, r27
     b7c:	51 e1       	ldi	r21, 0x11	; 17
     b7e:	07 c0       	rjmp	.+14     	; 0xb8e <__udivmodhi4_ep>

00000b80 <__udivmodhi4_loop>:
     b80:	aa 1f       	adc	r26, r26
     b82:	bb 1f       	adc	r27, r27
     b84:	a6 17       	cp	r26, r22
     b86:	b7 07       	cpc	r27, r23
     b88:	10 f0       	brcs	.+4      	; 0xb8e <__udivmodhi4_ep>
     b8a:	a6 1b       	sub	r26, r22
     b8c:	b7 0b       	sbc	r27, r23

00000b8e <__udivmodhi4_ep>:
     b8e:	88 1f       	adc	r24, r24
     b90:	99 1f       	adc	r25, r25
     b92:	5a 95       	dec	r21
     b94:	a9 f7       	brne	.-22     	; 0xb80 <__udivmodhi4_loop>
     b96:	80 95       	com	r24
     b98:	90 95       	com	r25
     b9a:	bc 01       	movw	r22, r24
     b9c:	cd 01       	movw	r24, r26
     b9e:	08 95       	ret

00000ba0 <__divmodhi4>:
     ba0:	97 fb       	bst	r25, 7
     ba2:	09 2e       	mov	r0, r25
     ba4:	07 26       	eor	r0, r23
     ba6:	0a d0       	rcall	.+20     	; 0xbbc <__divmodhi4_neg1>
     ba8:	77 fd       	sbrc	r23, 7
     baa:	04 d0       	rcall	.+8      	; 0xbb4 <__divmodhi4_neg2>
     bac:	e5 df       	rcall	.-54     	; 0xb78 <__udivmodhi4>
     bae:	06 d0       	rcall	.+12     	; 0xbbc <__divmodhi4_neg1>
     bb0:	00 20       	and	r0, r0
     bb2:	1a f4       	brpl	.+6      	; 0xbba <__divmodhi4_exit>

00000bb4 <__divmodhi4_neg2>:
     bb4:	70 95       	com	r23
     bb6:	61 95       	neg	r22
     bb8:	7f 4f       	sbci	r23, 0xFF	; 255

00000bba <__divmodhi4_exit>:
     bba:	08 95       	ret

00000bbc <__divmodhi4_neg1>:
     bbc:	f6 f7       	brtc	.-4      	; 0xbba <__divmodhi4_exit>
     bbe:	90 95       	com	r25
     bc0:	81 95       	neg	r24
     bc2:	9f 4f       	sbci	r25, 0xFF	; 255
     bc4:	08 95       	ret

00000bc6 <__divmodsi4>:
     bc6:	97 fb       	bst	r25, 7
     bc8:	09 2e       	mov	r0, r25
     bca:	05 26       	eor	r0, r21
     bcc:	0e d0       	rcall	.+28     	; 0xbea <__divmodsi4_neg1>
     bce:	57 fd       	sbrc	r21, 7
     bd0:	04 d0       	rcall	.+8      	; 0xbda <__divmodsi4_neg2>
     bd2:	14 d0       	rcall	.+40     	; 0xbfc <__udivmodsi4>
     bd4:	0a d0       	rcall	.+20     	; 0xbea <__divmodsi4_neg1>
     bd6:	00 1c       	adc	r0, r0
     bd8:	38 f4       	brcc	.+14     	; 0xbe8 <__divmodsi4_exit>

00000bda <__divmodsi4_neg2>:
     bda:	50 95       	com	r21
     bdc:	40 95       	com	r20
     bde:	30 95       	com	r19
     be0:	21 95       	neg	r18
     be2:	3f 4f       	sbci	r19, 0xFF	; 255
     be4:	4f 4f       	sbci	r20, 0xFF	; 255
     be6:	5f 4f       	sbci	r21, 0xFF	; 255

00000be8 <__divmodsi4_exit>:
     be8:	08 95       	ret

00000bea <__divmodsi4_neg1>:
     bea:	f6 f7       	brtc	.-4      	; 0xbe8 <__divmodsi4_exit>
     bec:	90 95       	com	r25
     bee:	80 95       	com	r24
     bf0:	70 95       	com	r23
     bf2:	61 95       	neg	r22
     bf4:	7f 4f       	sbci	r23, 0xFF	; 255
     bf6:	8f 4f       	sbci	r24, 0xFF	; 255
     bf8:	9f 4f       	sbci	r25, 0xFF	; 255
     bfa:	08 95       	ret

00000bfc <__udivmodsi4>:
     bfc:	a1 e2       	ldi	r26, 0x21	; 33
     bfe:	1a 2e       	mov	r1, r26
     c00:	aa 1b       	sub	r26, r26
     c02:	bb 1b       	sub	r27, r27
     c04:	fd 01       	movw	r30, r26
     c06:	0d c0       	rjmp	.+26     	; 0xc22 <__udivmodsi4_ep>

00000c08 <__udivmodsi4_loop>:
     c08:	aa 1f       	adc	r26, r26
     c0a:	bb 1f       	adc	r27, r27
     c0c:	ee 1f       	adc	r30, r30
     c0e:	ff 1f       	adc	r31, r31
     c10:	a2 17       	cp	r26, r18
     c12:	b3 07       	cpc	r27, r19
     c14:	e4 07       	cpc	r30, r20
     c16:	f5 07       	cpc	r31, r21
     c18:	20 f0       	brcs	.+8      	; 0xc22 <__udivmodsi4_ep>
     c1a:	a2 1b       	sub	r26, r18
     c1c:	b3 0b       	sbc	r27, r19
     c1e:	e4 0b       	sbc	r30, r20
     c20:	f5 0b       	sbc	r31, r21

00000c22 <__udivmodsi4_ep>:
     c22:	66 1f       	adc	r22, r22
     c24:	77 1f       	adc	r23, r23
     c26:	88 1f       	adc	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	1a 94       	dec	r1
     c2c:	69 f7       	brne	.-38     	; 0xc08 <__udivmodsi4_loop>
     c2e:	60 95       	com	r22
     c30:	70 95       	com	r23
     c32:	80 95       	com	r24
     c34:	90 95       	com	r25
     c36:	9b 01       	movw	r18, r22
     c38:	ac 01       	movw	r20, r24
     c3a:	bd 01       	movw	r22, r26
     c3c:	cf 01       	movw	r24, r30
     c3e:	08 95       	ret

00000c40 <sprintf>:
     c40:	ae e0       	ldi	r26, 0x0E	; 14
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	e6 e2       	ldi	r30, 0x26	; 38
     c46:	f6 e0       	ldi	r31, 0x06	; 6
     c48:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__prologue_saves__+0x1c>
     c4c:	0d 89       	ldd	r16, Y+21	; 0x15
     c4e:	1e 89       	ldd	r17, Y+22	; 0x16
     c50:	86 e0       	ldi	r24, 0x06	; 6
     c52:	8c 83       	std	Y+4, r24	; 0x04
     c54:	1a 83       	std	Y+2, r17	; 0x02
     c56:	09 83       	std	Y+1, r16	; 0x01
     c58:	8f ef       	ldi	r24, 0xFF	; 255
     c5a:	9f e7       	ldi	r25, 0x7F	; 127
     c5c:	9e 83       	std	Y+6, r25	; 0x06
     c5e:	8d 83       	std	Y+5, r24	; 0x05
     c60:	9e 01       	movw	r18, r28
     c62:	27 5e       	subi	r18, 0xE7	; 231
     c64:	3f 4f       	sbci	r19, 0xFF	; 255
     c66:	ce 01       	movw	r24, r28
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	6f 89       	ldd	r22, Y+23	; 0x17
     c6c:	78 8d       	ldd	r23, Y+24	; 0x18
     c6e:	a9 01       	movw	r20, r18
     c70:	0e 94 44 06 	call	0xc88	; 0xc88 <vfprintf>
     c74:	2f 81       	ldd	r18, Y+7	; 0x07
     c76:	38 85       	ldd	r19, Y+8	; 0x08
     c78:	02 0f       	add	r16, r18
     c7a:	13 1f       	adc	r17, r19
     c7c:	f8 01       	movw	r30, r16
     c7e:	10 82       	st	Z, r1
     c80:	2e 96       	adiw	r28, 0x0e	; 14
     c82:	e4 e0       	ldi	r30, 0x04	; 4
     c84:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <__epilogue_restores__+0x1c>

00000c88 <vfprintf>:
     c88:	ab e0       	ldi	r26, 0x0B	; 11
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	ea e4       	ldi	r30, 0x4A	; 74
     c8e:	f6 e0       	ldi	r31, 0x06	; 6
     c90:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <__prologue_saves__>
     c94:	3c 01       	movw	r6, r24
     c96:	2b 01       	movw	r4, r22
     c98:	5a 01       	movw	r10, r20
     c9a:	fc 01       	movw	r30, r24
     c9c:	17 82       	std	Z+7, r1	; 0x07
     c9e:	16 82       	std	Z+6, r1	; 0x06
     ca0:	83 81       	ldd	r24, Z+3	; 0x03
     ca2:	81 fd       	sbrc	r24, 1
     ca4:	03 c0       	rjmp	.+6      	; 0xcac <vfprintf+0x24>
     ca6:	6f ef       	ldi	r22, 0xFF	; 255
     ca8:	7f ef       	ldi	r23, 0xFF	; 255
     caa:	c6 c1       	rjmp	.+908    	; 0x1038 <vfprintf+0x3b0>
     cac:	9a e0       	ldi	r25, 0x0A	; 10
     cae:	89 2e       	mov	r8, r25
     cb0:	1e 01       	movw	r2, r28
     cb2:	08 94       	sec
     cb4:	21 1c       	adc	r2, r1
     cb6:	31 1c       	adc	r3, r1
     cb8:	f3 01       	movw	r30, r6
     cba:	23 81       	ldd	r18, Z+3	; 0x03
     cbc:	f2 01       	movw	r30, r4
     cbe:	23 fd       	sbrc	r18, 3
     cc0:	85 91       	lpm	r24, Z+
     cc2:	23 ff       	sbrs	r18, 3
     cc4:	81 91       	ld	r24, Z+
     cc6:	2f 01       	movw	r4, r30
     cc8:	88 23       	and	r24, r24
     cca:	09 f4       	brne	.+2      	; 0xcce <vfprintf+0x46>
     ccc:	b2 c1       	rjmp	.+868    	; 0x1032 <vfprintf+0x3aa>
     cce:	85 32       	cpi	r24, 0x25	; 37
     cd0:	39 f4       	brne	.+14     	; 0xce0 <vfprintf+0x58>
     cd2:	23 fd       	sbrc	r18, 3
     cd4:	85 91       	lpm	r24, Z+
     cd6:	23 ff       	sbrs	r18, 3
     cd8:	81 91       	ld	r24, Z+
     cda:	2f 01       	movw	r4, r30
     cdc:	85 32       	cpi	r24, 0x25	; 37
     cde:	29 f4       	brne	.+10     	; 0xcea <vfprintf+0x62>
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	b3 01       	movw	r22, r6
     ce4:	0e 94 37 08 	call	0x106e	; 0x106e <fputc>
     ce8:	e7 cf       	rjmp	.-50     	; 0xcb8 <vfprintf+0x30>
     cea:	98 2f       	mov	r25, r24
     cec:	ff 24       	eor	r15, r15
     cee:	ee 24       	eor	r14, r14
     cf0:	99 24       	eor	r9, r9
     cf2:	ff e1       	ldi	r31, 0x1F	; 31
     cf4:	ff 15       	cp	r31, r15
     cf6:	d0 f0       	brcs	.+52     	; 0xd2c <vfprintf+0xa4>
     cf8:	9b 32       	cpi	r25, 0x2B	; 43
     cfa:	69 f0       	breq	.+26     	; 0xd16 <vfprintf+0x8e>
     cfc:	9c 32       	cpi	r25, 0x2C	; 44
     cfe:	28 f4       	brcc	.+10     	; 0xd0a <vfprintf+0x82>
     d00:	90 32       	cpi	r25, 0x20	; 32
     d02:	59 f0       	breq	.+22     	; 0xd1a <vfprintf+0x92>
     d04:	93 32       	cpi	r25, 0x23	; 35
     d06:	91 f4       	brne	.+36     	; 0xd2c <vfprintf+0xa4>
     d08:	0e c0       	rjmp	.+28     	; 0xd26 <vfprintf+0x9e>
     d0a:	9d 32       	cpi	r25, 0x2D	; 45
     d0c:	49 f0       	breq	.+18     	; 0xd20 <vfprintf+0x98>
     d0e:	90 33       	cpi	r25, 0x30	; 48
     d10:	69 f4       	brne	.+26     	; 0xd2c <vfprintf+0xa4>
     d12:	41 e0       	ldi	r20, 0x01	; 1
     d14:	24 c0       	rjmp	.+72     	; 0xd5e <vfprintf+0xd6>
     d16:	52 e0       	ldi	r21, 0x02	; 2
     d18:	f5 2a       	or	r15, r21
     d1a:	84 e0       	ldi	r24, 0x04	; 4
     d1c:	f8 2a       	or	r15, r24
     d1e:	28 c0       	rjmp	.+80     	; 0xd70 <vfprintf+0xe8>
     d20:	98 e0       	ldi	r25, 0x08	; 8
     d22:	f9 2a       	or	r15, r25
     d24:	25 c0       	rjmp	.+74     	; 0xd70 <vfprintf+0xe8>
     d26:	e0 e1       	ldi	r30, 0x10	; 16
     d28:	fe 2a       	or	r15, r30
     d2a:	22 c0       	rjmp	.+68     	; 0xd70 <vfprintf+0xe8>
     d2c:	f7 fc       	sbrc	r15, 7
     d2e:	29 c0       	rjmp	.+82     	; 0xd82 <vfprintf+0xfa>
     d30:	89 2f       	mov	r24, r25
     d32:	80 53       	subi	r24, 0x30	; 48
     d34:	8a 30       	cpi	r24, 0x0A	; 10
     d36:	70 f4       	brcc	.+28     	; 0xd54 <vfprintf+0xcc>
     d38:	f6 fe       	sbrs	r15, 6
     d3a:	05 c0       	rjmp	.+10     	; 0xd46 <vfprintf+0xbe>
     d3c:	98 9c       	mul	r9, r8
     d3e:	90 2c       	mov	r9, r0
     d40:	11 24       	eor	r1, r1
     d42:	98 0e       	add	r9, r24
     d44:	15 c0       	rjmp	.+42     	; 0xd70 <vfprintf+0xe8>
     d46:	e8 9c       	mul	r14, r8
     d48:	e0 2c       	mov	r14, r0
     d4a:	11 24       	eor	r1, r1
     d4c:	e8 0e       	add	r14, r24
     d4e:	f0 e2       	ldi	r31, 0x20	; 32
     d50:	ff 2a       	or	r15, r31
     d52:	0e c0       	rjmp	.+28     	; 0xd70 <vfprintf+0xe8>
     d54:	9e 32       	cpi	r25, 0x2E	; 46
     d56:	29 f4       	brne	.+10     	; 0xd62 <vfprintf+0xda>
     d58:	f6 fc       	sbrc	r15, 6
     d5a:	6b c1       	rjmp	.+726    	; 0x1032 <vfprintf+0x3aa>
     d5c:	40 e4       	ldi	r20, 0x40	; 64
     d5e:	f4 2a       	or	r15, r20
     d60:	07 c0       	rjmp	.+14     	; 0xd70 <vfprintf+0xe8>
     d62:	9c 36       	cpi	r25, 0x6C	; 108
     d64:	19 f4       	brne	.+6      	; 0xd6c <vfprintf+0xe4>
     d66:	50 e8       	ldi	r21, 0x80	; 128
     d68:	f5 2a       	or	r15, r21
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <vfprintf+0xe8>
     d6c:	98 36       	cpi	r25, 0x68	; 104
     d6e:	49 f4       	brne	.+18     	; 0xd82 <vfprintf+0xfa>
     d70:	f2 01       	movw	r30, r4
     d72:	23 fd       	sbrc	r18, 3
     d74:	95 91       	lpm	r25, Z+
     d76:	23 ff       	sbrs	r18, 3
     d78:	91 91       	ld	r25, Z+
     d7a:	2f 01       	movw	r4, r30
     d7c:	99 23       	and	r25, r25
     d7e:	09 f0       	breq	.+2      	; 0xd82 <vfprintf+0xfa>
     d80:	b8 cf       	rjmp	.-144    	; 0xcf2 <vfprintf+0x6a>
     d82:	89 2f       	mov	r24, r25
     d84:	85 54       	subi	r24, 0x45	; 69
     d86:	83 30       	cpi	r24, 0x03	; 3
     d88:	18 f0       	brcs	.+6      	; 0xd90 <vfprintf+0x108>
     d8a:	80 52       	subi	r24, 0x20	; 32
     d8c:	83 30       	cpi	r24, 0x03	; 3
     d8e:	38 f4       	brcc	.+14     	; 0xd9e <vfprintf+0x116>
     d90:	44 e0       	ldi	r20, 0x04	; 4
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	a4 0e       	add	r10, r20
     d96:	b5 1e       	adc	r11, r21
     d98:	5f e3       	ldi	r21, 0x3F	; 63
     d9a:	59 83       	std	Y+1, r21	; 0x01
     d9c:	0f c0       	rjmp	.+30     	; 0xdbc <vfprintf+0x134>
     d9e:	93 36       	cpi	r25, 0x63	; 99
     da0:	31 f0       	breq	.+12     	; 0xdae <vfprintf+0x126>
     da2:	93 37       	cpi	r25, 0x73	; 115
     da4:	79 f0       	breq	.+30     	; 0xdc4 <vfprintf+0x13c>
     da6:	93 35       	cpi	r25, 0x53	; 83
     da8:	09 f0       	breq	.+2      	; 0xdac <vfprintf+0x124>
     daa:	56 c0       	rjmp	.+172    	; 0xe58 <vfprintf+0x1d0>
     dac:	20 c0       	rjmp	.+64     	; 0xdee <vfprintf+0x166>
     dae:	f5 01       	movw	r30, r10
     db0:	80 81       	ld	r24, Z
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	42 e0       	ldi	r20, 0x02	; 2
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	a4 0e       	add	r10, r20
     dba:	b5 1e       	adc	r11, r21
     dbc:	61 01       	movw	r12, r2
     dbe:	01 e0       	ldi	r16, 0x01	; 1
     dc0:	10 e0       	ldi	r17, 0x00	; 0
     dc2:	12 c0       	rjmp	.+36     	; 0xde8 <vfprintf+0x160>
     dc4:	f5 01       	movw	r30, r10
     dc6:	c0 80       	ld	r12, Z
     dc8:	d1 80       	ldd	r13, Z+1	; 0x01
     dca:	f6 fc       	sbrc	r15, 6
     dcc:	03 c0       	rjmp	.+6      	; 0xdd4 <vfprintf+0x14c>
     dce:	6f ef       	ldi	r22, 0xFF	; 255
     dd0:	7f ef       	ldi	r23, 0xFF	; 255
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <vfprintf+0x150>
     dd4:	69 2d       	mov	r22, r9
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	42 e0       	ldi	r20, 0x02	; 2
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	a4 0e       	add	r10, r20
     dde:	b5 1e       	adc	r11, r21
     de0:	c6 01       	movw	r24, r12
     de2:	0e 94 2c 08 	call	0x1058	; 0x1058 <strnlen>
     de6:	8c 01       	movw	r16, r24
     de8:	5f e7       	ldi	r21, 0x7F	; 127
     dea:	f5 22       	and	r15, r21
     dec:	14 c0       	rjmp	.+40     	; 0xe16 <vfprintf+0x18e>
     dee:	f5 01       	movw	r30, r10
     df0:	c0 80       	ld	r12, Z
     df2:	d1 80       	ldd	r13, Z+1	; 0x01
     df4:	f6 fc       	sbrc	r15, 6
     df6:	03 c0       	rjmp	.+6      	; 0xdfe <vfprintf+0x176>
     df8:	6f ef       	ldi	r22, 0xFF	; 255
     dfa:	7f ef       	ldi	r23, 0xFF	; 255
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <vfprintf+0x17a>
     dfe:	69 2d       	mov	r22, r9
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	42 e0       	ldi	r20, 0x02	; 2
     e04:	50 e0       	ldi	r21, 0x00	; 0
     e06:	a4 0e       	add	r10, r20
     e08:	b5 1e       	adc	r11, r21
     e0a:	c6 01       	movw	r24, r12
     e0c:	0e 94 21 08 	call	0x1042	; 0x1042 <strnlen_P>
     e10:	8c 01       	movw	r16, r24
     e12:	50 e8       	ldi	r21, 0x80	; 128
     e14:	f5 2a       	or	r15, r21
     e16:	f3 fe       	sbrs	r15, 3
     e18:	07 c0       	rjmp	.+14     	; 0xe28 <vfprintf+0x1a0>
     e1a:	1a c0       	rjmp	.+52     	; 0xe50 <vfprintf+0x1c8>
     e1c:	80 e2       	ldi	r24, 0x20	; 32
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	b3 01       	movw	r22, r6
     e22:	0e 94 37 08 	call	0x106e	; 0x106e <fputc>
     e26:	ea 94       	dec	r14
     e28:	8e 2d       	mov	r24, r14
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	08 17       	cp	r16, r24
     e2e:	19 07       	cpc	r17, r25
     e30:	a8 f3       	brcs	.-22     	; 0xe1c <vfprintf+0x194>
     e32:	0e c0       	rjmp	.+28     	; 0xe50 <vfprintf+0x1c8>
     e34:	f6 01       	movw	r30, r12
     e36:	f7 fc       	sbrc	r15, 7
     e38:	85 91       	lpm	r24, Z+
     e3a:	f7 fe       	sbrs	r15, 7
     e3c:	81 91       	ld	r24, Z+
     e3e:	6f 01       	movw	r12, r30
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	b3 01       	movw	r22, r6
     e44:	0e 94 37 08 	call	0x106e	; 0x106e <fputc>
     e48:	e1 10       	cpse	r14, r1
     e4a:	ea 94       	dec	r14
     e4c:	01 50       	subi	r16, 0x01	; 1
     e4e:	10 40       	sbci	r17, 0x00	; 0
     e50:	01 15       	cp	r16, r1
     e52:	11 05       	cpc	r17, r1
     e54:	79 f7       	brne	.-34     	; 0xe34 <vfprintf+0x1ac>
     e56:	ea c0       	rjmp	.+468    	; 0x102c <vfprintf+0x3a4>
     e58:	94 36       	cpi	r25, 0x64	; 100
     e5a:	11 f0       	breq	.+4      	; 0xe60 <vfprintf+0x1d8>
     e5c:	99 36       	cpi	r25, 0x69	; 105
     e5e:	69 f5       	brne	.+90     	; 0xeba <vfprintf+0x232>
     e60:	f7 fe       	sbrs	r15, 7
     e62:	08 c0       	rjmp	.+16     	; 0xe74 <vfprintf+0x1ec>
     e64:	f5 01       	movw	r30, r10
     e66:	20 81       	ld	r18, Z
     e68:	31 81       	ldd	r19, Z+1	; 0x01
     e6a:	42 81       	ldd	r20, Z+2	; 0x02
     e6c:	53 81       	ldd	r21, Z+3	; 0x03
     e6e:	84 e0       	ldi	r24, 0x04	; 4
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0a c0       	rjmp	.+20     	; 0xe88 <vfprintf+0x200>
     e74:	f5 01       	movw	r30, r10
     e76:	80 81       	ld	r24, Z
     e78:	91 81       	ldd	r25, Z+1	; 0x01
     e7a:	9c 01       	movw	r18, r24
     e7c:	44 27       	eor	r20, r20
     e7e:	37 fd       	sbrc	r19, 7
     e80:	40 95       	com	r20
     e82:	54 2f       	mov	r21, r20
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	a8 0e       	add	r10, r24
     e8a:	b9 1e       	adc	r11, r25
     e8c:	9f e6       	ldi	r25, 0x6F	; 111
     e8e:	f9 22       	and	r15, r25
     e90:	57 ff       	sbrs	r21, 7
     e92:	09 c0       	rjmp	.+18     	; 0xea6 <vfprintf+0x21e>
     e94:	50 95       	com	r21
     e96:	40 95       	com	r20
     e98:	30 95       	com	r19
     e9a:	21 95       	neg	r18
     e9c:	3f 4f       	sbci	r19, 0xFF	; 255
     e9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ea0:	5f 4f       	sbci	r21, 0xFF	; 255
     ea2:	e0 e8       	ldi	r30, 0x80	; 128
     ea4:	fe 2a       	or	r15, r30
     ea6:	ca 01       	movw	r24, r20
     ea8:	b9 01       	movw	r22, r18
     eaa:	a1 01       	movw	r20, r2
     eac:	2a e0       	ldi	r18, 0x0A	; 10
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__ultoa_invert>
     eb4:	d8 2e       	mov	r13, r24
     eb6:	d2 18       	sub	r13, r2
     eb8:	40 c0       	rjmp	.+128    	; 0xf3a <vfprintf+0x2b2>
     eba:	95 37       	cpi	r25, 0x75	; 117
     ebc:	29 f4       	brne	.+10     	; 0xec8 <vfprintf+0x240>
     ebe:	1f 2d       	mov	r17, r15
     ec0:	1f 7e       	andi	r17, 0xEF	; 239
     ec2:	2a e0       	ldi	r18, 0x0A	; 10
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	1d c0       	rjmp	.+58     	; 0xf02 <vfprintf+0x27a>
     ec8:	1f 2d       	mov	r17, r15
     eca:	19 7f       	andi	r17, 0xF9	; 249
     ecc:	9f 36       	cpi	r25, 0x6F	; 111
     ece:	61 f0       	breq	.+24     	; 0xee8 <vfprintf+0x260>
     ed0:	90 37       	cpi	r25, 0x70	; 112
     ed2:	20 f4       	brcc	.+8      	; 0xedc <vfprintf+0x254>
     ed4:	98 35       	cpi	r25, 0x58	; 88
     ed6:	09 f0       	breq	.+2      	; 0xeda <vfprintf+0x252>
     ed8:	ac c0       	rjmp	.+344    	; 0x1032 <vfprintf+0x3aa>
     eda:	0f c0       	rjmp	.+30     	; 0xefa <vfprintf+0x272>
     edc:	90 37       	cpi	r25, 0x70	; 112
     ede:	39 f0       	breq	.+14     	; 0xeee <vfprintf+0x266>
     ee0:	98 37       	cpi	r25, 0x78	; 120
     ee2:	09 f0       	breq	.+2      	; 0xee6 <vfprintf+0x25e>
     ee4:	a6 c0       	rjmp	.+332    	; 0x1032 <vfprintf+0x3aa>
     ee6:	04 c0       	rjmp	.+8      	; 0xef0 <vfprintf+0x268>
     ee8:	28 e0       	ldi	r18, 0x08	; 8
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	0a c0       	rjmp	.+20     	; 0xf02 <vfprintf+0x27a>
     eee:	10 61       	ori	r17, 0x10	; 16
     ef0:	14 fd       	sbrc	r17, 4
     ef2:	14 60       	ori	r17, 0x04	; 4
     ef4:	20 e1       	ldi	r18, 0x10	; 16
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	04 c0       	rjmp	.+8      	; 0xf02 <vfprintf+0x27a>
     efa:	14 fd       	sbrc	r17, 4
     efc:	16 60       	ori	r17, 0x06	; 6
     efe:	20 e1       	ldi	r18, 0x10	; 16
     f00:	32 e0       	ldi	r19, 0x02	; 2
     f02:	17 ff       	sbrs	r17, 7
     f04:	08 c0       	rjmp	.+16     	; 0xf16 <vfprintf+0x28e>
     f06:	f5 01       	movw	r30, r10
     f08:	60 81       	ld	r22, Z
     f0a:	71 81       	ldd	r23, Z+1	; 0x01
     f0c:	82 81       	ldd	r24, Z+2	; 0x02
     f0e:	93 81       	ldd	r25, Z+3	; 0x03
     f10:	44 e0       	ldi	r20, 0x04	; 4
     f12:	50 e0       	ldi	r21, 0x00	; 0
     f14:	08 c0       	rjmp	.+16     	; 0xf26 <vfprintf+0x29e>
     f16:	f5 01       	movw	r30, r10
     f18:	80 81       	ld	r24, Z
     f1a:	91 81       	ldd	r25, Z+1	; 0x01
     f1c:	bc 01       	movw	r22, r24
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	42 e0       	ldi	r20, 0x02	; 2
     f24:	50 e0       	ldi	r21, 0x00	; 0
     f26:	a4 0e       	add	r10, r20
     f28:	b5 1e       	adc	r11, r21
     f2a:	a1 01       	movw	r20, r2
     f2c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__ultoa_invert>
     f30:	d8 2e       	mov	r13, r24
     f32:	d2 18       	sub	r13, r2
     f34:	8f e7       	ldi	r24, 0x7F	; 127
     f36:	f8 2e       	mov	r15, r24
     f38:	f1 22       	and	r15, r17
     f3a:	f6 fe       	sbrs	r15, 6
     f3c:	0b c0       	rjmp	.+22     	; 0xf54 <vfprintf+0x2cc>
     f3e:	5e ef       	ldi	r21, 0xFE	; 254
     f40:	f5 22       	and	r15, r21
     f42:	d9 14       	cp	r13, r9
     f44:	38 f4       	brcc	.+14     	; 0xf54 <vfprintf+0x2cc>
     f46:	f4 fe       	sbrs	r15, 4
     f48:	07 c0       	rjmp	.+14     	; 0xf58 <vfprintf+0x2d0>
     f4a:	f2 fc       	sbrc	r15, 2
     f4c:	05 c0       	rjmp	.+10     	; 0xf58 <vfprintf+0x2d0>
     f4e:	8f ee       	ldi	r24, 0xEF	; 239
     f50:	f8 22       	and	r15, r24
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <vfprintf+0x2d0>
     f54:	1d 2d       	mov	r17, r13
     f56:	01 c0       	rjmp	.+2      	; 0xf5a <vfprintf+0x2d2>
     f58:	19 2d       	mov	r17, r9
     f5a:	f4 fe       	sbrs	r15, 4
     f5c:	0d c0       	rjmp	.+26     	; 0xf78 <vfprintf+0x2f0>
     f5e:	fe 01       	movw	r30, r28
     f60:	ed 0d       	add	r30, r13
     f62:	f1 1d       	adc	r31, r1
     f64:	80 81       	ld	r24, Z
     f66:	80 33       	cpi	r24, 0x30	; 48
     f68:	19 f4       	brne	.+6      	; 0xf70 <vfprintf+0x2e8>
     f6a:	99 ee       	ldi	r25, 0xE9	; 233
     f6c:	f9 22       	and	r15, r25
     f6e:	08 c0       	rjmp	.+16     	; 0xf80 <vfprintf+0x2f8>
     f70:	1f 5f       	subi	r17, 0xFF	; 255
     f72:	f2 fe       	sbrs	r15, 2
     f74:	05 c0       	rjmp	.+10     	; 0xf80 <vfprintf+0x2f8>
     f76:	03 c0       	rjmp	.+6      	; 0xf7e <vfprintf+0x2f6>
     f78:	8f 2d       	mov	r24, r15
     f7a:	86 78       	andi	r24, 0x86	; 134
     f7c:	09 f0       	breq	.+2      	; 0xf80 <vfprintf+0x2f8>
     f7e:	1f 5f       	subi	r17, 0xFF	; 255
     f80:	0f 2d       	mov	r16, r15
     f82:	f3 fc       	sbrc	r15, 3
     f84:	14 c0       	rjmp	.+40     	; 0xfae <vfprintf+0x326>
     f86:	f0 fe       	sbrs	r15, 0
     f88:	0f c0       	rjmp	.+30     	; 0xfa8 <vfprintf+0x320>
     f8a:	1e 15       	cp	r17, r14
     f8c:	10 f0       	brcs	.+4      	; 0xf92 <vfprintf+0x30a>
     f8e:	9d 2c       	mov	r9, r13
     f90:	0b c0       	rjmp	.+22     	; 0xfa8 <vfprintf+0x320>
     f92:	9d 2c       	mov	r9, r13
     f94:	9e 0c       	add	r9, r14
     f96:	91 1a       	sub	r9, r17
     f98:	1e 2d       	mov	r17, r14
     f9a:	06 c0       	rjmp	.+12     	; 0xfa8 <vfprintf+0x320>
     f9c:	80 e2       	ldi	r24, 0x20	; 32
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	b3 01       	movw	r22, r6
     fa2:	0e 94 37 08 	call	0x106e	; 0x106e <fputc>
     fa6:	1f 5f       	subi	r17, 0xFF	; 255
     fa8:	1e 15       	cp	r17, r14
     faa:	c0 f3       	brcs	.-16     	; 0xf9c <vfprintf+0x314>
     fac:	04 c0       	rjmp	.+8      	; 0xfb6 <vfprintf+0x32e>
     fae:	1e 15       	cp	r17, r14
     fb0:	10 f4       	brcc	.+4      	; 0xfb6 <vfprintf+0x32e>
     fb2:	e1 1a       	sub	r14, r17
     fb4:	01 c0       	rjmp	.+2      	; 0xfb8 <vfprintf+0x330>
     fb6:	ee 24       	eor	r14, r14
     fb8:	04 ff       	sbrs	r16, 4
     fba:	0f c0       	rjmp	.+30     	; 0xfda <vfprintf+0x352>
     fbc:	80 e3       	ldi	r24, 0x30	; 48
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	b3 01       	movw	r22, r6
     fc2:	0e 94 37 08 	call	0x106e	; 0x106e <fputc>
     fc6:	02 ff       	sbrs	r16, 2
     fc8:	1d c0       	rjmp	.+58     	; 0x1004 <vfprintf+0x37c>
     fca:	01 fd       	sbrc	r16, 1
     fcc:	03 c0       	rjmp	.+6      	; 0xfd4 <vfprintf+0x34c>
     fce:	88 e7       	ldi	r24, 0x78	; 120
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	0e c0       	rjmp	.+28     	; 0xff0 <vfprintf+0x368>
     fd4:	88 e5       	ldi	r24, 0x58	; 88
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	0b c0       	rjmp	.+22     	; 0xff0 <vfprintf+0x368>
     fda:	80 2f       	mov	r24, r16
     fdc:	86 78       	andi	r24, 0x86	; 134
     fde:	91 f0       	breq	.+36     	; 0x1004 <vfprintf+0x37c>
     fe0:	01 ff       	sbrs	r16, 1
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <vfprintf+0x360>
     fe4:	8b e2       	ldi	r24, 0x2B	; 43
     fe6:	01 c0       	rjmp	.+2      	; 0xfea <vfprintf+0x362>
     fe8:	80 e2       	ldi	r24, 0x20	; 32
     fea:	f7 fc       	sbrc	r15, 7
     fec:	8d e2       	ldi	r24, 0x2D	; 45
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	b3 01       	movw	r22, r6
     ff2:	0e 94 37 08 	call	0x106e	; 0x106e <fputc>
     ff6:	06 c0       	rjmp	.+12     	; 0x1004 <vfprintf+0x37c>
     ff8:	80 e3       	ldi	r24, 0x30	; 48
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	b3 01       	movw	r22, r6
     ffe:	0e 94 37 08 	call	0x106e	; 0x106e <fputc>
    1002:	9a 94       	dec	r9
    1004:	d9 14       	cp	r13, r9
    1006:	c0 f3       	brcs	.-16     	; 0xff8 <vfprintf+0x370>
    1008:	da 94       	dec	r13
    100a:	f1 01       	movw	r30, r2
    100c:	ed 0d       	add	r30, r13
    100e:	f1 1d       	adc	r31, r1
    1010:	80 81       	ld	r24, Z
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	b3 01       	movw	r22, r6
    1016:	0e 94 37 08 	call	0x106e	; 0x106e <fputc>
    101a:	dd 20       	and	r13, r13
    101c:	a9 f7       	brne	.-22     	; 0x1008 <vfprintf+0x380>
    101e:	06 c0       	rjmp	.+12     	; 0x102c <vfprintf+0x3a4>
    1020:	80 e2       	ldi	r24, 0x20	; 32
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	b3 01       	movw	r22, r6
    1026:	0e 94 37 08 	call	0x106e	; 0x106e <fputc>
    102a:	ea 94       	dec	r14
    102c:	ee 20       	and	r14, r14
    102e:	c1 f7       	brne	.-16     	; 0x1020 <vfprintf+0x398>
    1030:	43 ce       	rjmp	.-890    	; 0xcb8 <vfprintf+0x30>
    1032:	f3 01       	movw	r30, r6
    1034:	66 81       	ldd	r22, Z+6	; 0x06
    1036:	77 81       	ldd	r23, Z+7	; 0x07
    1038:	cb 01       	movw	r24, r22
    103a:	2b 96       	adiw	r28, 0x0b	; 11
    103c:	e2 e1       	ldi	r30, 0x12	; 18
    103e:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__epilogue_restores__>

00001042 <strnlen_P>:
    1042:	fc 01       	movw	r30, r24
    1044:	05 90       	lpm	r0, Z+
    1046:	61 50       	subi	r22, 0x01	; 1
    1048:	70 40       	sbci	r23, 0x00	; 0
    104a:	01 10       	cpse	r0, r1
    104c:	d8 f7       	brcc	.-10     	; 0x1044 <strnlen_P+0x2>
    104e:	80 95       	com	r24
    1050:	90 95       	com	r25
    1052:	8e 0f       	add	r24, r30
    1054:	9f 1f       	adc	r25, r31
    1056:	08 95       	ret

00001058 <strnlen>:
    1058:	fc 01       	movw	r30, r24
    105a:	61 50       	subi	r22, 0x01	; 1
    105c:	70 40       	sbci	r23, 0x00	; 0
    105e:	01 90       	ld	r0, Z+
    1060:	01 10       	cpse	r0, r1
    1062:	d8 f7       	brcc	.-10     	; 0x105a <strnlen+0x2>
    1064:	80 95       	com	r24
    1066:	90 95       	com	r25
    1068:	8e 0f       	add	r24, r30
    106a:	9f 1f       	adc	r25, r31
    106c:	08 95       	ret

0000106e <fputc>:
    106e:	0f 93       	push	r16
    1070:	1f 93       	push	r17
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	8c 01       	movw	r16, r24
    1078:	eb 01       	movw	r28, r22
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	81 ff       	sbrs	r24, 1
    107e:	1b c0       	rjmp	.+54     	; 0x10b6 <fputc+0x48>
    1080:	82 ff       	sbrs	r24, 2
    1082:	0d c0       	rjmp	.+26     	; 0x109e <fputc+0x30>
    1084:	2e 81       	ldd	r18, Y+6	; 0x06
    1086:	3f 81       	ldd	r19, Y+7	; 0x07
    1088:	8c 81       	ldd	r24, Y+4	; 0x04
    108a:	9d 81       	ldd	r25, Y+5	; 0x05
    108c:	28 17       	cp	r18, r24
    108e:	39 07       	cpc	r19, r25
    1090:	64 f4       	brge	.+24     	; 0x10aa <fputc+0x3c>
    1092:	e8 81       	ld	r30, Y
    1094:	f9 81       	ldd	r31, Y+1	; 0x01
    1096:	01 93       	st	Z+, r16
    1098:	f9 83       	std	Y+1, r31	; 0x01
    109a:	e8 83       	st	Y, r30
    109c:	06 c0       	rjmp	.+12     	; 0x10aa <fputc+0x3c>
    109e:	e8 85       	ldd	r30, Y+8	; 0x08
    10a0:	f9 85       	ldd	r31, Y+9	; 0x09
    10a2:	80 2f       	mov	r24, r16
    10a4:	09 95       	icall
    10a6:	89 2b       	or	r24, r25
    10a8:	31 f4       	brne	.+12     	; 0x10b6 <fputc+0x48>
    10aa:	8e 81       	ldd	r24, Y+6	; 0x06
    10ac:	9f 81       	ldd	r25, Y+7	; 0x07
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	9f 83       	std	Y+7, r25	; 0x07
    10b2:	8e 83       	std	Y+6, r24	; 0x06
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <fputc+0x4c>
    10b6:	0f ef       	ldi	r16, 0xFF	; 255
    10b8:	1f ef       	ldi	r17, 0xFF	; 255
    10ba:	c8 01       	movw	r24, r16
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	08 95       	ret

000010c6 <__ultoa_invert>:
    10c6:	fa 01       	movw	r30, r20
    10c8:	aa 27       	eor	r26, r26
    10ca:	28 30       	cpi	r18, 0x08	; 8
    10cc:	51 f1       	breq	.+84     	; 0x1122 <__ultoa_invert+0x5c>
    10ce:	20 31       	cpi	r18, 0x10	; 16
    10d0:	81 f1       	breq	.+96     	; 0x1132 <__ultoa_invert+0x6c>
    10d2:	e8 94       	clt
    10d4:	6f 93       	push	r22
    10d6:	6e 7f       	andi	r22, 0xFE	; 254
    10d8:	6e 5f       	subi	r22, 0xFE	; 254
    10da:	7f 4f       	sbci	r23, 0xFF	; 255
    10dc:	8f 4f       	sbci	r24, 0xFF	; 255
    10de:	9f 4f       	sbci	r25, 0xFF	; 255
    10e0:	af 4f       	sbci	r26, 0xFF	; 255
    10e2:	b1 e0       	ldi	r27, 0x01	; 1
    10e4:	3e d0       	rcall	.+124    	; 0x1162 <__ultoa_invert+0x9c>
    10e6:	b4 e0       	ldi	r27, 0x04	; 4
    10e8:	3c d0       	rcall	.+120    	; 0x1162 <__ultoa_invert+0x9c>
    10ea:	67 0f       	add	r22, r23
    10ec:	78 1f       	adc	r23, r24
    10ee:	89 1f       	adc	r24, r25
    10f0:	9a 1f       	adc	r25, r26
    10f2:	a1 1d       	adc	r26, r1
    10f4:	68 0f       	add	r22, r24
    10f6:	79 1f       	adc	r23, r25
    10f8:	8a 1f       	adc	r24, r26
    10fa:	91 1d       	adc	r25, r1
    10fc:	a1 1d       	adc	r26, r1
    10fe:	6a 0f       	add	r22, r26
    1100:	71 1d       	adc	r23, r1
    1102:	81 1d       	adc	r24, r1
    1104:	91 1d       	adc	r25, r1
    1106:	a1 1d       	adc	r26, r1
    1108:	20 d0       	rcall	.+64     	; 0x114a <__ultoa_invert+0x84>
    110a:	09 f4       	brne	.+2      	; 0x110e <__ultoa_invert+0x48>
    110c:	68 94       	set
    110e:	3f 91       	pop	r19
    1110:	2a e0       	ldi	r18, 0x0A	; 10
    1112:	26 9f       	mul	r18, r22
    1114:	11 24       	eor	r1, r1
    1116:	30 19       	sub	r19, r0
    1118:	30 5d       	subi	r19, 0xD0	; 208
    111a:	31 93       	st	Z+, r19
    111c:	de f6       	brtc	.-74     	; 0x10d4 <__ultoa_invert+0xe>
    111e:	cf 01       	movw	r24, r30
    1120:	08 95       	ret
    1122:	46 2f       	mov	r20, r22
    1124:	47 70       	andi	r20, 0x07	; 7
    1126:	40 5d       	subi	r20, 0xD0	; 208
    1128:	41 93       	st	Z+, r20
    112a:	b3 e0       	ldi	r27, 0x03	; 3
    112c:	0f d0       	rcall	.+30     	; 0x114c <__ultoa_invert+0x86>
    112e:	c9 f7       	brne	.-14     	; 0x1122 <__ultoa_invert+0x5c>
    1130:	f6 cf       	rjmp	.-20     	; 0x111e <__ultoa_invert+0x58>
    1132:	46 2f       	mov	r20, r22
    1134:	4f 70       	andi	r20, 0x0F	; 15
    1136:	40 5d       	subi	r20, 0xD0	; 208
    1138:	4a 33       	cpi	r20, 0x3A	; 58
    113a:	18 f0       	brcs	.+6      	; 0x1142 <__ultoa_invert+0x7c>
    113c:	49 5d       	subi	r20, 0xD9	; 217
    113e:	31 fd       	sbrc	r19, 1
    1140:	40 52       	subi	r20, 0x20	; 32
    1142:	41 93       	st	Z+, r20
    1144:	02 d0       	rcall	.+4      	; 0x114a <__ultoa_invert+0x84>
    1146:	a9 f7       	brne	.-22     	; 0x1132 <__ultoa_invert+0x6c>
    1148:	ea cf       	rjmp	.-44     	; 0x111e <__ultoa_invert+0x58>
    114a:	b4 e0       	ldi	r27, 0x04	; 4
    114c:	a6 95       	lsr	r26
    114e:	97 95       	ror	r25
    1150:	87 95       	ror	r24
    1152:	77 95       	ror	r23
    1154:	67 95       	ror	r22
    1156:	ba 95       	dec	r27
    1158:	c9 f7       	brne	.-14     	; 0x114c <__ultoa_invert+0x86>
    115a:	00 97       	sbiw	r24, 0x00	; 0
    115c:	61 05       	cpc	r22, r1
    115e:	71 05       	cpc	r23, r1
    1160:	08 95       	ret
    1162:	9b 01       	movw	r18, r22
    1164:	ac 01       	movw	r20, r24
    1166:	0a 2e       	mov	r0, r26
    1168:	06 94       	lsr	r0
    116a:	57 95       	ror	r21
    116c:	47 95       	ror	r20
    116e:	37 95       	ror	r19
    1170:	27 95       	ror	r18
    1172:	ba 95       	dec	r27
    1174:	c9 f7       	brne	.-14     	; 0x1168 <__ultoa_invert+0xa2>
    1176:	62 0f       	add	r22, r18
    1178:	73 1f       	adc	r23, r19
    117a:	84 1f       	adc	r24, r20
    117c:	95 1f       	adc	r25, r21
    117e:	a0 1d       	adc	r26, r0
    1180:	08 95       	ret

00001182 <__prologue_saves__>:
    1182:	2f 92       	push	r2
    1184:	3f 92       	push	r3
    1186:	4f 92       	push	r4
    1188:	5f 92       	push	r5
    118a:	6f 92       	push	r6
    118c:	7f 92       	push	r7
    118e:	8f 92       	push	r8
    1190:	9f 92       	push	r9
    1192:	af 92       	push	r10
    1194:	bf 92       	push	r11
    1196:	cf 92       	push	r12
    1198:	df 92       	push	r13
    119a:	ef 92       	push	r14
    119c:	ff 92       	push	r15
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	ca 1b       	sub	r28, r26
    11ac:	db 0b       	sbc	r29, r27
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	09 94       	ijmp

000011ba <__epilogue_restores__>:
    11ba:	2a 88       	ldd	r2, Y+18	; 0x12
    11bc:	39 88       	ldd	r3, Y+17	; 0x11
    11be:	48 88       	ldd	r4, Y+16	; 0x10
    11c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    11c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    11c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    11c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    11c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    11ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    11cc:	b9 84       	ldd	r11, Y+9	; 0x09
    11ce:	c8 84       	ldd	r12, Y+8	; 0x08
    11d0:	df 80       	ldd	r13, Y+7	; 0x07
    11d2:	ee 80       	ldd	r14, Y+6	; 0x06
    11d4:	fd 80       	ldd	r15, Y+5	; 0x05
    11d6:	0c 81       	ldd	r16, Y+4	; 0x04
    11d8:	1b 81       	ldd	r17, Y+3	; 0x03
    11da:	aa 81       	ldd	r26, Y+2	; 0x02
    11dc:	b9 81       	ldd	r27, Y+1	; 0x01
    11de:	ce 0f       	add	r28, r30
    11e0:	d1 1d       	adc	r29, r1
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	ed 01       	movw	r28, r26
    11ee:	08 95       	ret

000011f0 <_exit>:
    11f0:	f8 94       	cli

000011f2 <__stop_program>:
    11f2:	ff cf       	rjmp	.-2      	; 0x11f2 <__stop_program>
